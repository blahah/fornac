!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.rnatreemap=e():n.rnatreemap=e()}(window,function(){return d={"../node_modules/css-loader/dist/cjs.js!./styles/rnaplot.css":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.i, ".structure-background-rect {\\n    stroke: black;\\n    stroke-width: 5;\\n    fill: transparent;\\n}\\n\\ncircle.rna-base {\\n  stroke: #ccc;\\n  stroke-width: 1px;\\n  opacity: 1;\\n  fill: white;\\n}\\n\\ncircle.rna-base.label {\\n    stroke: transparent;\\n    stroke-width: 0;\\n    fill: white;\\n}\\n\\nline.link {\\n  stroke: #999;\\n  stroke-opacity: 0.8;\\n  stroke-width: 2;\\n}\\n\\nline.rna-link {\\n  stroke: #999;\\n  stroke-opacity: 0.8;\\n  stroke-width: 2;\\n}\\n\\n.overlay {\\n    fill: transparent;\\n}\\n\\n.rna-name {\\n    text-anchor: middle;\\n    dy: -10;\\n    font-family: Tahoma, Geneva, sans-serif;\\n    font-size: 8pt;\\n}\\n\\nline.rna-link[link-type=\\"backbone\\"] {\\n    stroke: transparent;\\n}\\n\\nline.rna-link[link-type=\\"basepair\\"] {\\n    stroke: transparent;\\n}\\n\\nline.rna-link[link-type=\\"fake\\"] {\\n    stroke: transparent;\\n}\\n\\nline.rna-link[link-type=\\"extra\\"] {\\n    stroke: grey;\\n}\\n\\nline.rna-link[extra-link-type=\\"correct\\"] {\\n    stroke: green;\\n}\\n\\nline.rna-link[extra-link-type=\\"incorrect\\"] {\\n    stroke: green;\\n}\\n\\n\\npath {\\n    stroke: grey;\\n  stroke-width: 2;\\n}\\n\\npath[extra-link-type=\\"correct\\"] {\\n    stroke: green;\\n}\\n\\npath[extra-link-type=\\"incorrect\\"] {\\n    stroke: red;\\n}\\n\\n\\nline.basepair {\\n  stroke: red;\\n}\\n\\nline.intermolecule {\\n  stroke: blue;\\n}\\n\\nline.chain_chain {\\n  stroke-dasharray: 3,3;\\n}\\n\\nline.fake {\\n  stroke: green;\\n}\\n\\n.transparent {\\n    fill: transparent;\\n    stroke-width: 0;\\n    stroke-opacity: 0;\\n    opacity: 0;\\n}\\n\\n.d3-tip {\\n    line-height: 1;\\n    font-weight: bold;\\n    padding: 6px;\\n    background: rgba(0, 0, 0, 0.6);\\n    color: #fff;\\n    border-radius: 4px;\\n    pointer-events: none;\\n          }\\n\\ntext.nucleotide-label {\\n    font-size: 5.5pt;\\n    font-weight: bold;\\n    font-family: Tahoma, Geneva, sans-serif;\\n    color: rgb(100,100,100);\\n    pointer-events: none;\\n}\\n\\ntext.number-label {\\n    font-size: 5.5pt;\\n    font-weight: bold;\\n    font-family: Tahoma, Geneva, sans-serif;\\n    color: rgb(100,100,100);\\n    pointer-events: none;\\n}\\n\\ntext {\\n    pointer-events: none;\\n}\\n\\ng.gnode {\\n\\n}\\n\\n.brush .extent {\\n  fill-opacity: .1;\\n  stroke: #fff;\\n  shape-rendering: crispEdges;\\n}\\n\\n.noselect {\\n    -webkit-touch-callout: none;\\n    -webkit-user-select: none;\\n    -khtml-user-select: none;\\n    -moz-user-select: none;\\n    -ms-user-select: none;\\n    user-select: none;\\n}\\n", ""]);\n// Exports\n/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://%5Bname%5D/./styles/rnaplot.css?../node_modules/css-loader/dist/cjs.js')},"../node_modules/css-loader/dist/runtime/api.js":function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/css-loader/dist/runtime/api.js?')},"../node_modules/rnautils/dist/scripts/rnautils.js":function(module,exports,__webpack_require__){eval('!function(r,t){ true?module.exports=t():undefined}(this,function(){return function(r){function t(n){if(e[n])return e[n].exports;var o=e[n]={exports:{},id:n,loaded:!1};return r[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var e={};return t.m=r,t.c=e,t.p="",t(0)}([function(r,t,e){r.exports=e(1)},function(r,t){"use strict";function e(r,t){if(r===t)return!0;if(null===r||null===t)return!1;if(r.length!=t.length)return!1;for(var e=0;e<r.length;++e)if(r[e]!==t[e])return!1;return!0}function n(){var r=this;r.bracketLeft="([{<ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),r.bracketRight=")]}>abcdefghijklmnopqrstuvwxyz".split(""),r.inverseBrackets=function(r){for(var t={},e=0;e<r.length;e++)t[r[e]]=e;return t},r.maximumMatching=function(r){for(var t=r[0],e=0,n=new Array(t+1),o=0;t>=o;o++){n[o]=new Array(t+1);for(var a=o;t>=a;a++)n[o][a]=0}for(var s=0,o=t-e-1;o>0;o--)for(var a=o+e+1;t>=a;a++){s=n[o][a-1];for(var i=a-e-1;i>=o;i--)r[i]===a&&(s=Math.max(s,(i>o?n[o][i-1]:0)+1+(a-i-1>0?n[i+1][a-1]:0)));n[o][a]=s}return s=n[1][t],n},r.backtrackMaximumMatching=function(t,e){var n=Array.apply(null,Array(t.length)).map(function(){return 0});return r.mmBt(t,n,e,1,t.length-1),n},r.mmBt=function(t,e,n,o,a){var s=t[o][a],i=0;if(!(i>a-o-1)){if(t[o][a-1]==s)return void r.mmBt(t,e,n,o,a-1);for(var l=a-i-1;l>=o;l--)if(n[a]===l){var u=l>o?t[o][l-1]:0,c=a-l-1>0?t[l+1][a-1]:0;if(u+c+1==s)return e[l]=a,e[a]=l,l>o&&r.mmBt(t,e,n,o,l-1),void r.mmBt(t,e,n,l+1,a-1)}console.log("FAILED!!!"+o+","+a+": backtracking failed!")}},r.dotbracketToPairtable=function(t){var e=Array.apply(null,new Array(t.length+1)).map(Number.prototype.valueOf,0);e[0]=t.length;for(var n={},o=0;o<r.bracketLeft.length;o++)n[o]=[];for(var a=r.inverseBrackets(r.bracketLeft),s=r.inverseBrackets(r.bracketRight),o=0;o<t.length;o++){var i=t[o],l=o+1;if("."==i||"o"==i)e[l]=0;else if(i in a)n[a[i]].push(l);else{if(!(i in s))throw"Unknown symbol in dotbracket string";var u=n[s[i]].pop();e[l]=u,e[u]=l}}for(var c in n)if(n[c].length>0)throw"Unmatched base at position "+n[c][0];return e},r.insertIntoStack=function(r,t,e){for(var n=0;r[n].length>0&&r[n][r[n].length-1]<e;)n+=1;return r[n].push(e),n},r.deleteFromStack=function(r,t){for(var e=0;0===r[e].length||r[e][r[e].length-1]!=t;)e+=1;return r[e].pop(),e},r.pairtableToDotbracket=function(t){for(var e={},n=0;n<t[0];n++)e[n]=[];for(var n,o={},a="",n=1;n<t[0]+1;n++){if(0!==t[n]&&t[n]in o)throw"Invalid pairtable contains duplicate entries";o[t[n]]=!0,a+=0===t[n]?".":t[n]>n?r.bracketLeft[r.insertIntoStack(e,n,t[n])]:r.bracketRight[r.deleteFromStack(e,n)]}return a},r.findUnmatched=function(t,e,n){for(var o,a=[],s=[],i=e,l=n,o=e;n>=o;o++)0!==t[o]&&(t[o]<e||t[o]>n)&&s.push([o,t[o]]);for(var o=i;l>=o;o++){for(;0===t[o]&&l>=o;)o++;for(n=t[o];t[o]===n;)o++,n--;a=a.concat(r.findUnmatched(t,o,n))}return s.length>0&&a.push(s),a},r.removePseudoknotsFromPairtable=function(t){for(var e=r.maximumMatching(t),n=r.backtrackMaximumMatching(e,t),o=[],a=1;a<t.length;a++)t[a]<a||n[a]!=t[a]&&(o.push([a,t[a]]),t[t[a]]=0,t[a]=0);return o},r.ptToElements=function(t,e,n,o,s){var i=[],l=[n-1],u=[o+1];if(arguments.length<5&&(s=[]),n>o)return[];for(;0===t[n];n++)l.push(n);for(;0===t[o];o--)u.push(o);if(n>o){if(l.push(n),0===e)return[["e",e,l.sort(a)]];for(var c=!1,f=[],p=[],h=0;h<l.length;h++)c?p.push(l[h]):f.push(l[h]),s.indexOf(l[h])>=0&&(c=!0);return c?[["h",e,l.sort(a)]]:[["h",e,l.sort(a)]]}if(t[n]!=o){var m=l,h=n;for(m.push(h);o>=h;){for(i=i.concat(r.ptToElements(t,e,h,t[h],s)),m.push(t[h]),h=t[h]+1;0===t[h]&&o>=h;h++)m.push(h);m.push(h)}return m.pop(),m=m.concat(u),m.length>0&&(0===e?i.push(["e",e,m.sort(a)]):i.push(["m",e,m.sort(a)])),i}if(t[n]===o){l.push(n),u.push(o);var v=l.concat(u);v.length>4&&(0===e?i.push(["e",e,l.concat(u).sort(a)]):i.push(["i",e,l.concat(u).sort(a)]))}for(var g=[];t[n]===o&&o>n;)g.push(n),g.push(o),n+=1,o-=1,e+=1;return l=[n-1],u=[o+1],i.push(["s",e,g.sort(a)]),i.concat(r.ptToElements(t,e,n,o,s))}}function o(r){var t=this;return t.colorsText=r,t.parseRange=function(r){for(var t=r.split(","),e=[],n=0;n<t.length;n++){var o=t[n].split("-");if(1==o.length)e.push(parseInt(o[0]));else if(2==o.length)for(var a=parseInt(o[0]),s=parseInt(o[1]),i=a;s>=i;i++)e.push(i);else console.log("Malformed range (too many dashes):",r)}return e},t.parseColorText=function(r){for(var e=r.split("\\n"),n="",o=1,a={colorValues:{"":{}},range:["white","steelblue"]},s=[],i=0;i<e.length;i++)if(">"!=e[i][0])for(var l=e[i].trim().split(/[\\s]+/),u=0;u<l.length;u++)if(isNaN(l[u])){if(0===l[u].search("range")){var c=l[u].split("="),f=c[1].split(":");a.range=[f[0],f[1]];continue}if(0==l[u].search("domain")){var p=l[u].split("="),f=p[1].split(":");a.domain=[f[0],f[1]];continue}for(var h=l[u].split(":"),m=t.parseRange(h[0]),v=h[1],g=0;g<m.length;g++)isNaN(v)?a.colorValues[n][m[g]]=v:(a.colorValues[n][m[g]]=+v,s.push(Number(v)))}else a.colorValues[n][o]=Number(l[u]),o+=1,s.push(Number(l[u]));else n=e[i].trim().slice(1),o=1,a.colorValues[n]={};return"domain"in a||(a.domain=[Math.min.apply(null,s),Math.max.apply(null,s)]),t.colorsJson=a,t},t.normalizeColors=function(){var r;for(var e in t.colorsJson){var n=Number.MAX_VALUE,o=Number.MIN_VALUE;for(var a in t.colorsJson.colorValues[e])r=t.colorsJson.colorValues[e][a],"number"==typeof r&&(n>r&&(n=r),r>o&&(o=r));for(a in t.colorsJson.colorValues[e])r=t.colorsJson.colorValues[e][a],"number"==typeof r&&(t.colorsJson.colorValues[e][a]=(r-n)/(o-n))}return t},t.parseColorText(t.colorsText),t}Object.defineProperty(t,"__esModule",{value:!0}),t.arraysEqual=e,t.RNAUtilities=n,t.ColorScheme=o;var a=function(r,t){return r-t};t.rnaUtilities=new n}])});\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/rnautils/dist/scripts/rnautils.js?')},"../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?")},"../node_modules/webpack-stream/node_modules/webpack/buildin/harmony-module.js":function(module,exports){eval('module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, "loaded", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "id", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "exports", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/webpack-stream/node_modules/webpack/buildin/harmony-module.js?')},"./scripts/naview/base.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Base", function() { return Base; });\n/* harmony import */ var _region_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./region.js */ "./scripts/naview/region.js");\n\nfunction Base() {\n  this.mate = null;\n  this.x = null;\n  this.y = null;\n  this.extracted = null;\n  this.region = new _region_js__WEBPACK_IMPORTED_MODULE_0__["Region"]();\n}\n\nBase.prototype.getMate = function () {\n  return this.mate;\n};\n\nBase.prototype.setMate = function (mate) {\n  this.mate = mate;\n};\n\nBase.prototype.getX = function () {\n  return this.x;\n};\n\nBase.prototype.setX = function (x) {\n  this.x = x;\n};\n\nBase.prototype.getY = function () {\n  return this.y;\n};\n\nBase.prototype.setY = function (y) {\n  this.y = y;\n};\n\nBase.prototype.isExtracted = function () {\n  return this.extracted;\n};\n\nBase.prototype.setExtracted = function (extracted) {\n  this.extracted = extracted;\n};\n\nBase.prototype.getRegion = function () {\n  return this.region;\n};\n\nBase.prototype.setRegion = function (region) {\n  this.region = region;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/base.js?')},"./scripts/naview/connection.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return Connection; });\n/* harmony import */ var _loop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loop.js */ "./scripts/naview/loop.js");\n/* harmony import */ var _region_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./region.js */ "./scripts/naview/region.js");\n\n\nfunction Connection() {\n  this.loop = new _loop_js__WEBPACK_IMPORTED_MODULE_0__["Loop"]();\n  this.region = new _region_js__WEBPACK_IMPORTED_MODULE_1__["Region"](); // Start and end form the 1st base pair of the region.\n\n  this.start = null;\n  this.end = null;\n  this.xrad = null;\n  this.yrad = null;\n  this.angle = null; // True if segment between this connection and the\n  // next must be extruded out of the circle\n\n  this.extruded = null; // True if the extruded segment must be drawn long.\n\n  this.broken = null;\n  this._isNull = false;\n}\n\nConnection.prototype.isNull = function () {\n  return this._isNull;\n};\n\nConnection.prototype.setNull = function (isNull) {\n  this._isNull = isNull;\n};\n\nConnection.prototype.getLoop = function () {\n  return this.loop;\n};\n\nConnection.prototype.setLoop = function (loop) {\n  this.loop = loop;\n};\n\nConnection.prototype.getRegion = function () {\n  return this.region;\n};\n\nConnection.prototype.setRegion = function (region) {\n  this.region = region;\n};\n\nConnection.prototype.getStart = function () {\n  return this.start;\n};\n\nConnection.prototype.setStart = function (start) {\n  this.start = start;\n};\n\nConnection.prototype.getEnd = function () {\n  return this.end;\n};\n\nConnection.prototype.setEnd = function (end) {\n  this.end = end;\n};\n\nConnection.prototype.getXrad = function () {\n  return this.xrad;\n};\n\nConnection.prototype.setXrad = function (xrad) {\n  this.xrad = xrad;\n};\n\nConnection.prototype.getYrad = function () {\n  return this.yrad;\n};\n\nConnection.prototype.setYrad = function (yrad) {\n  this.yrad = yrad;\n};\n\nConnection.prototype.getAngle = function () {\n  return this.angle;\n};\n\nConnection.prototype.setAngle = function (angle) {\n  this.angle = angle;\n};\n\nConnection.prototype.isExtruded = function () {\n  return this.extruded;\n};\n\nConnection.prototype.setExtruded = function (extruded) {\n  this.extruded = extruded;\n};\n\nConnection.prototype.isBroken = function () {\n  return this.broken;\n};\n\nConnection.prototype.setBroken = function (broken) {\n  this.broken = broken;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/connection.js?')},"./scripts/naview/loop.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Loop", function() { return Loop; });\n/* harmony import */ var _connection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./connection.js */ "./scripts/naview/connection.js");\n\nfunction Loop() {\n  this.nconnection = null;\n  this.connections = [];\n  this._connections = [];\n  this.number = null;\n  this.depth = null;\n  this.mark = null;\n  this.x = null;\n  this.y = null;\n  this.radius = null;\n}\n\nLoop.prototype.getNconnection = function () {\n  return this.nconnection;\n};\n\nLoop.prototype.setNconnection = function (nconnection) {\n  this.nconnection = nconnection;\n};\n\nLoop.prototype.setConnection = function (i, c) {\n  if (c != null) {\n    this._connections[i] = c;\n  } else {\n    if (!this._connections[i]) {\n      this._connections[i] = new _connection_js__WEBPACK_IMPORTED_MODULE_0__["Connection"]();\n    }\n\n    this._connections[i].setNull(true);\n  }\n};\n\nLoop.prototype.getConnection = function (i) {\n  var Connection = __webpack_require__(/*! ./connection */ "./scripts/naview/connection.js");\n\n  if (!this._connections[i]) {\n    this._connections[i] = new Connection();\n  }\n\n  var c = this._connections[i];\n\n  if (c.isNull()) {\n    return null;\n  } else {\n    return c;\n  }\n};\n\nLoop.prototype.addConnection = function (i, c) {\n  this._connections.push(c);\n};\n\nLoop.prototype.getNumber = function () {\n  return this.number;\n};\n\nLoop.prototype.setNumber = function (number) {\n  this.number = number;\n};\n\nLoop.prototype.getDepth = function () {\n  return this.depth;\n};\n\nLoop.prototype.setDepth = function (depth) {\n  this.depth = depth;\n};\n\nLoop.prototype.isMark = function () {\n  return this.mark;\n};\n\nLoop.prototype.setMark = function (mark) {\n  this.mark = mark;\n};\n\nLoop.prototype.getX = function () {\n  return this.x;\n};\n\nLoop.prototype.setX = function (x) {\n  this.x = x;\n};\n\nLoop.prototype.getY = function () {\n  return this.y;\n};\n\nLoop.prototype.setY = function (y) {\n  this.y = y;\n};\n\nLoop.prototype.getRadius = function () {\n  return this.radius;\n};\n\nLoop.prototype.setRadius = function (radius) {\n  this.radius = radius;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/loop.js?')},"./scripts/naview/naview.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAView", function() { return NAView; });\n/* harmony import */ var _radloop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./radloop.js */ "./scripts/naview/radloop.js");\n/* harmony import */ var _connection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./connection.js */ "./scripts/naview/connection.js");\n/* harmony import */ var _region_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./region.js */ "./scripts/naview/region.js");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ "./scripts/naview/base.js");\n/* harmony import */ var _loop_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loop.js */ "./scripts/naview/loop.js");\n\n\n\n\n\nfunction NAView() {\n  this.ANUM = 9999.0;\n  this.MAXITER = 500;\n  this.bases = [];\n  this.nbase = null;\n  this.nregion = null;\n  this.loop_count = null;\n  this.root = new _loop_js__WEBPACK_IMPORTED_MODULE_4__["Loop"]();\n  this.loops = [];\n  this.regions = [];\n  this.rlphead = new _radloop_js__WEBPACK_IMPORTED_MODULE_0__["Radloop"]();\n  this.lencut = 0.8;\n  this.RADIUS_REDUCTION_FACTOR = 1.4; // show algorithm step by step\n\n  this.angleinc = null;\n  this._h = null; // private boolean noIterationFailureYet = true;\n\n  this.HELIX_FACTOR = 0.6;\n  this.BACKBONE_DISTANCE = 27;\n}\n\nNAView.prototype.naview_xy_coordinates = function (pair_table) {\n  var x = [];\n  var y = [];\n\n  if (pair_table.length === 0 || pair_table[0] === 0) {\n    return 0;\n  }\n\n  var i;\n  this.nbase = pair_table[0];\n  this.bases = [];\n\n  for (var index = 0; index < this.nbase + 1; index++) {\n    this.bases.push(new _base_js__WEBPACK_IMPORTED_MODULE_3__["Base"]());\n  }\n\n  this.regions = [];\n\n  for (var index = 0; index < this.nbase + 1; index++) {\n    this.regions.push(new _region_js__WEBPACK_IMPORTED_MODULE_2__["Region"]());\n  }\n\n  this.read_in_bases(pair_table);\n  this.rlphead = null;\n  this.find_regions();\n  this.loop_count = 0;\n  this.loops = [];\n\n  for (var index = 0; index < this.nbase + 1; index++) {\n    this.loops.push(new _loop_js__WEBPACK_IMPORTED_MODULE_4__["Loop"]());\n  }\n\n  this.construct_loop(0);\n  this.find_central_loop();\n  this.traverse_loop(this.root, null);\n\n  for (i = 0; i < this.nbase; i++) {\n    x.push(100 + this.BACKBONE_DISTANCE * this.bases[i + 1].getX());\n    y.push(100 + this.BACKBONE_DISTANCE * this.bases[i + 1].getY());\n  }\n\n  return {\n    nbase: this.nbase,\n    x: x,\n    y: y\n  };\n};\n\nNAView.prototype.read_in_bases = function read_in_bases(pair_table) {\n  var i = null;\n  var npairs = null; // Set up an origin.\n\n  this.bases.push(new _base_js__WEBPACK_IMPORTED_MODULE_3__["Base"]());\n  this.bases[0].setMate(0);\n  this.bases[0].setExtracted(false);\n  this.bases[0].setX(this.ANUM);\n  this.bases[0].setY(this.ANUM);\n\n  for (npairs = 0, i = 1; i <= this.nbase; i++) {\n    this.bases.push(new _base_js__WEBPACK_IMPORTED_MODULE_3__["Base"]());\n    this.bases[i].setExtracted(false);\n    this.bases[i].setX(this.ANUM);\n    this.bases[i].setY(this.ANUM);\n    this.bases[i].setMate(pair_table[i]);\n    if (pair_table[i] > i) npairs++;\n  } // must have at least 1 pair to avoid segfault\n\n\n  if (npairs == 0) {\n    this.bases[1].setMate(this.nbase);\n    this.bases[this.nbase].setMate(1);\n  }\n};\n\nNAView.prototype.find_regions = function find_regions() {\n  var i = null;\n  var mate = null;\n  var nb1 = null;\n  nb1 = this.nbase + 1;\n  var mark = [];\n\n  for (i = 0; i < nb1; i++) {\n    mark.push(false);\n  }\n\n  this.nregion = 0;\n\n  for (i = 0; i <= this.nbase; i++) {\n    if ((mate = this.bases[i].getMate()) != 0 && !mark[i]) {\n      this.regions[this.nregion].setStart1(i);\n      this.regions[this.nregion].setEnd2(mate);\n      mark[i] = true;\n      mark[mate] = true;\n      this.bases[i].setRegion(this.regions[this.nregion]);\n      this.bases[mate].setRegion(this.regions[this.nregion]);\n\n      for (i++, mate--; i < mate && this.bases[i].getMate() == mate; i++, mate--) {\n        mark[mate] = true;\n        mark[i] = true;\n        this.bases[i].setRegion(this.regions[this.nregion]);\n        this.bases[mate].setRegion(this.regions[this.nregion]);\n      }\n\n      this.regions[this.nregion].setEnd1(--i);\n      this.regions[this.nregion].setStart2(mate + 1);\n      this.nregion++;\n    }\n  }\n};\n\nNAView.prototype.construct_loop = function construct_loop(ibase) {\n  var i = null;\n  var mate = null;\n  var retloop = new _loop_js__WEBPACK_IMPORTED_MODULE_4__["Loop"]();\n  var lp = new _loop_js__WEBPACK_IMPORTED_MODULE_4__["Loop"]();\n  var cp = new _connection_js__WEBPACK_IMPORTED_MODULE_1__["Connection"]();\n  var rp = new _region_js__WEBPACK_IMPORTED_MODULE_2__["Region"]();\n  var rlp = new _radloop_js__WEBPACK_IMPORTED_MODULE_0__["Radloop"]();\n  retloop = this.loops[this.loop_count++];\n  retloop.setNconnection(0);\n  retloop.setDepth(0);\n  retloop.setNumber(this.loop_count);\n  retloop.setRadius(0.0);\n\n  for (rlp = this.rlphead; rlp != null; rlp = rlp.getNext()) {\n    if (rlp.getLoopnumber() == this.loop_count) retloop.setRadius(rlp.getRadius());\n  }\n\n  i = ibase;\n\n  do {\n    if ((mate = this.bases[i].getMate()) != 0) {\n      rp = this.bases[i].getRegion();\n\n      if (!this.bases[rp.getStart1()].isExtracted()) {\n        if (i == rp.getStart1()) {\n          this.bases[rp.getStart1()].setExtracted(true);\n          this.bases[rp.getEnd1()].setExtracted(true);\n          this.bases[rp.getStart2()].setExtracted(true);\n          this.bases[rp.getEnd2()].setExtracted(true);\n          lp = this.construct_loop(rp.getEnd1() < this.nbase ? rp.getEnd1() + 1 : 0);\n        } else if (i == rp.getStart2()) {\n          this.bases[rp.getStart2()].setExtracted(true);\n          this.bases[rp.getEnd2()].setExtracted(true);\n          this.bases[rp.getStart1()].setExtracted(true);\n          this.bases[rp.getEnd1()].setExtracted(true);\n          lp = this.construct_loop(rp.getEnd2() < this.nbase ? rp.getEnd2() + 1 : 0);\n        } else {\n          console.log("Something went terribly wrong ....");\n        }\n\n        retloop.setNconnection(retloop.getNconnection() + 1);\n        cp = new _connection_js__WEBPACK_IMPORTED_MODULE_1__["Connection"]();\n        retloop.setConnection(retloop.getNconnection() - 1, cp);\n        retloop.setConnection(retloop.getNconnection(), null);\n        cp.setLoop(lp);\n        cp.setRegion(rp);\n\n        if (i == rp.getStart1()) {\n          cp.setStart(rp.getStart1());\n          cp.setEnd(rp.getEnd2());\n        } else {\n          cp.setStart(rp.getStart2());\n          cp.setEnd(rp.getEnd1());\n        }\n\n        cp.setExtruded(false);\n        cp.setBroken(false);\n        lp.setNconnection(lp.getNconnection() + 1);\n        cp = new _connection_js__WEBPACK_IMPORTED_MODULE_1__["Connection"]();\n        lp.setConnection(lp.getNconnection() - 1, cp);\n        lp.setConnection(lp.getNconnection(), null);\n        cp.setLoop(retloop);\n        cp.setRegion(rp);\n\n        if (i == rp.getStart1()) {\n          cp.setStart(rp.getStart2());\n          cp.setEnd(rp.getEnd1());\n        } else {\n          cp.setStart(rp.getStart1());\n          cp.setEnd(rp.getEnd2());\n        }\n\n        cp.setExtruded(false);\n        cp.setBroken(false);\n      }\n\n      i = mate;\n    }\n\n    if (++i > this.nbase) i = 0;\n  } while (i != ibase);\n\n  return retloop;\n};\n\nNAView.prototype.find_central_loop = function find_central_loop() {\n  var lp = new _loop_js__WEBPACK_IMPORTED_MODULE_4__["Loop"]();\n  var maxconn = null;\n  var maxdepth = null;\n  var i = null;\n  determine_depths.bind(this)();\n  maxconn = 0;\n  maxdepth = -1;\n\n  for (i = 0; i < this.loop_count; i++) {\n    lp = this.loops[i];\n\n    if (lp.getNconnection() > maxconn) {\n      maxdepth = lp.getDepth();\n      maxconn = lp.getNconnection();\n      this.root = lp;\n    } else if (lp.getDepth() > maxdepth && lp.getNconnection() == maxconn) {\n      maxdepth = lp.getDepth();\n      this.root = lp;\n    }\n  }\n};\n\nfunction determine_depths() {\n  var lp = new _loop_js__WEBPACK_IMPORTED_MODULE_4__["Loop"]();\n  var i = null;\n  var j = null;\n\n  for (i = 0; i < this.loop_count; i++) {\n    lp = this.loops[i];\n\n    for (j = 0; j < this.loop_count; j++) {\n      this.loops[j].setMark(false);\n    }\n\n    lp.setDepth(depth(lp));\n  }\n}\n\nfunction depth(lp) {\n  var count = null;\n  var ret = null;\n  var d = null;\n\n  if (lp.getNconnection() <= 1) {\n    return 0;\n  }\n\n  if (lp.isMark()) {\n    return -1;\n  }\n\n  lp.setMark(true);\n  count = 0;\n  ret = 0;\n\n  for (var i = 0; lp.getConnection(i) != null; i++) {\n    d = depth(lp.getConnection(i).getLoop());\n\n    if (d >= 0) {\n      if (++count == 1) {\n        ret = d;\n      } else if (ret > d) {\n        ret = d;\n      }\n    }\n  }\n\n  lp.setMark(false);\n  return ret + 1;\n}\n\nNAView.prototype.traverse_loop = function traverse_loop(lp, anchor_connection) {\n  var xs, ys, xe, ye, xn, yn, angleinc, r;\n  var radius, xc, yc, xo, yo, astart, aend, a;\n  var cp, cpnext, acp, cpprev;\n  var i, j, n, ic;\n  var da, maxang;\n  var count, icstart, icend, icmiddle, icroot;\n  var done, done_all_connections, rooted;\n  var sign;\n  var midx, midy, nrx, nry, mx, my, vx, vy, dotmv, nmidx, nmidy;\n  var icstart1, icup, icdown, icnext, direction;\n  var dan, dx, dy, rr;\n  var cpx, cpy, cpnextx, cpnexty, cnx, cny, rcn, rc, lnx, lny, rl, ac, acn, sx, sy, dcp;\n  var imaxloop = 0;\n  angleinc = 2 * Math.PI / (this.nbase + 1);\n  acp = null;\n  icroot = -1;\n  var indice = 0;\n\n  for (ic = 0; (cp = lp.getConnection(indice)) != null; indice++, ic++) {\n    xs = -Math.sin(angleinc * cp.getStart());\n    ys = Math.cos(angleinc * cp.getStart());\n    xe = -Math.sin(angleinc * cp.getEnd());\n    ye = Math.cos(angleinc * cp.getEnd());\n    xn = ye - ys;\n    yn = xs - xe;\n    r = Math.sqrt(xn * xn + yn * yn);\n    cp.setXrad(xn / r);\n    cp.setYrad(yn / r);\n    cp.setAngle(Math.atan2(yn, xn));\n\n    if (cp.getAngle() < 0.0) {\n      cp.setAngle(cp.getAngle() + 2 * Math.PI);\n    }\n\n    if (anchor_connection != null && anchor_connection.getRegion() == cp.getRegion()) {\n      acp = cp;\n      icroot = ic;\n    }\n  }\n\n  set_radius: while (true) {\n    this.determine_radius(lp, this.lencut);\n    radius = lp.getRadius() / this.RADIUS_REDUCTION_FACTOR;\n\n    if (anchor_connection == null) {\n      xc = yc = 0.0;\n    } else {\n      xo = (this.bases[acp.getStart()].getX() + this.bases[acp.getEnd()].getX()) / 2.0;\n      yo = (this.bases[acp.getStart()].getY() + this.bases[acp.getEnd()].getY()) / 2.0;\n      xc = xo - radius * acp.getXrad();\n      yc = yo - radius * acp.getYrad();\n    } // The construction of the connectors will proceed in blocks of\n    // connected connectors, where a connected connector pairs means two\n    // connectors that are forced out of the drawn circle because they\n    // are too close together in angle.\n    // First, find the start of a block of connected connectors\n\n\n    if (icroot == -1) {\n      icstart = 0;\n    } else {\n      icstart = icroot;\n    }\n\n    cp = lp.getConnection(icstart);\n    count = 0;\n    done = false;\n\n    do {\n      j = icstart - 1;\n\n      if (j < 0) {\n        j = lp.getNconnection() - 1;\n      }\n\n      cpprev = lp.getConnection(j);\n\n      if (!this.connected_connection(cpprev, cp)) {\n        done = true;\n      } else {\n        icstart = j;\n        cp = cpprev;\n      }\n\n      if (++count > lp.getNconnection()) {\n        // Here everything is connected. Break on maximum angular\n        // separation between connections.\n        maxang = -1.0;\n\n        for (ic = 0; ic < lp.getNconnection(); ic++) {\n          j = ic + 1;\n\n          if (j >= lp.getNconnection()) {\n            j = 0;\n          }\n\n          cp = lp.getConnection(ic);\n          cpnext = lp.getConnection(j);\n          ac = cpnext.getAngle() - cp.getAngle();\n\n          if (ac < 0.0) {\n            ac += 2 * Math.PI;\n          }\n\n          if (ac > maxang) {\n            maxang = ac;\n            imaxloop = ic;\n          }\n        }\n\n        icend = imaxloop;\n        icstart = imaxloop + 1;\n\n        if (icstart >= lp.getNconnection()) {\n          icstart = 0;\n        }\n\n        cp = lp.getConnection(icend);\n        cp.setBroken(true);\n        done = true;\n      }\n    } while (!done);\n\n    done_all_connections = false;\n    icstart1 = icstart;\n\n    while (!done_all_connections) {\n      count = 0;\n      done = false;\n      icend = icstart;\n      rooted = false;\n\n      while (!done) {\n        cp = lp.getConnection(icend);\n\n        if (icend == icroot) {\n          rooted = true;\n        }\n\n        j = icend + 1;\n\n        if (j >= lp.getNconnection()) {\n          j = 0;\n        }\n\n        cpnext = lp.getConnection(j);\n\n        if (this.connected_connection(cp, cpnext)) {\n          if (++count >= lp.getNconnection()) {\n            break;\n          }\n\n          icend = j;\n        } else {\n          done = true;\n        }\n      }\n\n      icmiddle = this.find_ic_middle(icstart, icend, anchor_connection, acp, lp);\n      ic = icup = icdown = icmiddle;\n      done = false;\n      direction = 0;\n\n      while (!done) {\n        if (direction < 0) {\n          ic = icup;\n        } else if (direction == 0) {\n          ic = icmiddle;\n        } else {\n          ic = icdown;\n        }\n\n        if (ic >= 0) {\n          cp = lp.getConnection(ic);\n\n          if (anchor_connection == null || acp != cp) {\n            if (direction == 0) {\n              astart = cp.getAngle() - Math.asin(1.0 / 2.0 / radius);\n              aend = cp.getAngle() + Math.asin(1.0 / 2.0 / radius);\n              this.bases[cp.getStart()].setX(xc + radius * Math.cos(astart));\n              this.bases[cp.getStart()].setY(yc + radius * Math.sin(astart));\n              this.bases[cp.getEnd()].setX(xc + radius * Math.cos(aend));\n              this.bases[cp.getEnd()].setY(yc + radius * Math.sin(aend));\n            } else if (direction < 0) {\n              j = ic + 1;\n\n              if (j >= lp.getNconnection()) {\n                j = 0;\n              }\n\n              cp = lp.getConnection(ic);\n              cpnext = lp.getConnection(j);\n              cpx = cp.getXrad();\n              cpy = cp.getYrad();\n              ac = (cp.getAngle() + cpnext.getAngle()) / 2.0;\n\n              if (cp.getAngle() > cpnext.getAngle()) {\n                ac -= Math.PI;\n              }\n\n              cnx = Math.cos(ac);\n              cny = Math.sin(ac);\n              lnx = cny;\n              lny = -cnx;\n              da = cpnext.getAngle() - cp.getAngle();\n\n              if (da < 0.0) {\n                da += 2 * Math.PI;\n              }\n\n              if (cp.isExtruded()) {\n                if (da <= Math.PI / 2) {\n                  rl = 2.0;\n                } else {\n                  rl = 1.5;\n                }\n              } else {\n                rl = 1.0;\n              }\n\n              this.bases[cp.getEnd()].setX(this.bases[cpnext.getStart()].getX() + rl * lnx);\n              this.bases[cp.getEnd()].setY(this.bases[cpnext.getStart()].getY() + rl * lny);\n              this.bases[cp.getStart()].setX(this.bases[cp.getEnd()].getX() + cpy);\n              this.bases[cp.getStart()].setY(this.bases[cp.getEnd()].getY() - cpx);\n            } else {\n              j = ic - 1;\n\n              if (j < 0) {\n                j = lp.getNconnection() - 1;\n              }\n\n              cp = lp.getConnection(j);\n              cpnext = lp.getConnection(ic);\n              cpnextx = cpnext.getXrad();\n              cpnexty = cpnext.getYrad();\n              ac = (cp.getAngle() + cpnext.getAngle()) / 2.0;\n\n              if (cp.getAngle() > cpnext.getAngle()) {\n                ac -= Math.PI;\n              }\n\n              cnx = Math.cos(ac);\n              cny = Math.sin(ac);\n              lnx = -cny;\n              lny = cnx;\n              da = cpnext.getAngle() - cp.getAngle();\n\n              if (da < 0.0) {\n                da += 2 * Math.PI;\n              }\n\n              if (cp.isExtruded()) {\n                if (da <= Math.PI / 2) {\n                  rl = 2.0;\n                } else {\n                  rl = 1.5;\n                }\n              } else {\n                rl = 1.0;\n              }\n\n              this.bases[cpnext.getStart()].setX(this.bases[cp.getEnd()].getX() + rl * lnx);\n              this.bases[cpnext.getStart()].setY(this.bases[cp.getEnd()].getY() + rl * lny);\n              this.bases[cpnext.getEnd()].setX(this.bases[cpnext.getStart()].getX() - cpnexty);\n              this.bases[cpnext.getEnd()].setY(this.bases[cpnext.getStart()].getY() + cpnextx);\n            }\n          }\n        }\n\n        if (direction < 0) {\n          if (icdown == icend) {\n            icdown = -1;\n          } else if (icdown >= 0) {\n            if (++icdown >= lp.getNconnection()) {\n              icdown = 0;\n            }\n          }\n\n          direction = 1;\n        } else {\n          if (icup == icstart) {\n            icup = -1;\n          } else if (icup >= 0) {\n            if (--icup < 0) {\n              icup = lp.getNconnection() - 1;\n            }\n          }\n\n          direction = -1;\n        }\n\n        done = icup == -1 && icdown == -1;\n      }\n\n      icnext = icend + 1;\n\n      if (icnext >= lp.getNconnection()) {\n        icnext = 0;\n      }\n\n      if (icend != icstart && !(icstart == icstart1 && icnext == icstart1)) {\n        // Move the bases just constructed (or the radius) so that\n        // the bisector of the end points is radius distance away\n        // from the loop center.\n        cp = lp.getConnection(icstart);\n        cpnext = lp.getConnection(icend);\n        dx = this.bases[cpnext.getEnd()].getX() - this.bases[cp.getStart()].getX();\n        dy = this.bases[cpnext.getEnd()].getY() - this.bases[cp.getStart()].getY();\n        midx = this.bases[cp.getStart()].getX() + dx / 2.0;\n        midy = this.bases[cp.getStart()].getY() + dy / 2.0;\n        rr = Math.sqrt(dx * dx + dy * dy);\n        mx = dx / rr;\n        my = dy / rr;\n        vx = xc - midx;\n        vy = yc - midy;\n        rr = Math.sqrt(dx * dx + dy * dy);\n        vx /= rr;\n        vy /= rr;\n        dotmv = vx * mx + vy * my;\n        nrx = dotmv * mx - vx;\n        nry = dotmv * my - vy;\n        rr = Math.sqrt(nrx * nrx + nry * nry);\n        nrx /= rr;\n        nry /= rr; // Determine which side of the bisector the center should\n        // be.\n\n        dx = this.bases[cp.getStart()].getX() - xc;\n        dy = this.bases[cp.getStart()].getY() - yc;\n        ac = Math.atan2(dy, dx);\n\n        if (ac < 0.0) {\n          ac += 2 * Math.PI;\n        }\n\n        dx = this.bases[cpnext.getEnd()].getX() - xc;\n        dy = this.bases[cpnext.getEnd()].getY() - yc;\n        acn = Math.atan2(dy, dx);\n\n        if (acn < 0.0) {\n          acn += 2 * Math.PI;\n        }\n\n        if (acn < ac) {\n          acn += 2 * Math.PI;\n        }\n\n        if (acn - ac > Math.PI) {\n          sign = -1;\n        } else {\n          sign = 1;\n        }\n\n        nmidx = xc + sign * radius * nrx;\n        nmidy = yc + sign * radius * nry;\n\n        if (rooted) {\n          xc -= nmidx - midx;\n          yc -= nmidy - midy;\n        } else {\n          for (ic = icstart;;) {\n            cp = lp.getConnection(ic);\n            i = cp.getStart();\n            this.bases[i].setX(this.bases[i].getX() + nmidx - midx);\n            this.bases[i].setY(this.bases[i].getY() + nmidy - midy);\n            i = cp.getEnd();\n            this.bases[i].setX(this.bases[i].getX() + nmidx - midx);\n            this.bases[i].setY(this.bases[i].getY() + nmidy - midy);\n\n            if (ic == icend) {\n              break;\n            }\n\n            if (++ic >= lp.getNconnection()) {\n              ic = 0;\n            }\n          }\n        }\n      }\n\n      icstart = icnext;\n      done_all_connections = icstart == icstart1;\n    }\n\n    for (ic = 0; ic < lp.getNconnection(); ic++) {\n      cp = lp.getConnection(ic);\n      j = ic + 1;\n\n      if (j >= lp.getNconnection()) {\n        j = 0;\n      }\n\n      cpnext = lp.getConnection(j);\n      dx = this.bases[cp.getEnd()].getX() - xc;\n      dy = this.bases[cp.getEnd()].getY() - yc;\n      rc = Math.sqrt(dx * dx + dy * dy);\n      ac = Math.atan2(dy, dx);\n\n      if (ac < 0.0) {\n        ac += 2 * Math.PI;\n      }\n\n      dx = this.bases[cpnext.getStart()].getX() - xc;\n      dy = this.bases[cpnext.getStart()].getY() - yc;\n      rcn = Math.sqrt(dx * dx + dy * dy);\n      acn = Math.atan2(dy, dx);\n\n      if (acn < 0.0) {\n        acn += 2 * Math.PI;\n      }\n\n      if (acn < ac) {\n        acn += 2 * Math.PI;\n      }\n\n      dan = acn - ac;\n      dcp = cpnext.getAngle() - cp.getAngle();\n\n      if (dcp <= 0.0) {\n        dcp += 2 * Math.PI;\n      }\n\n      if (Math.abs(dan - dcp) > Math.PI) {\n        if (cp.isExtruded()) {\n          console.log("Warning from traverse_loop. Loop " + lp.getNumber() + " has crossed regions\\n");\n        } else if (cpnext.getStart() - cp.getEnd() != 1) {\n          cp.setExtruded(true);\n          continue set_radius; // remplacement du goto\n        }\n      }\n\n      if (cp.isExtruded()) {\n        this.construct_extruded_segment(cp, cpnext);\n      } else {\n        n = cpnext.getStart() - cp.getEnd();\n\n        if (n < 0) {\n          n += this.nbase + 1;\n        }\n\n        angleinc = dan / n;\n\n        for (j = 1; j < n; j++) {\n          i = cp.getEnd() + j;\n\n          if (i > this.nbase) {\n            i -= this.nbase + 1;\n          }\n\n          a = ac + j * angleinc;\n          rr = rc + (rcn - rc) * (a - ac) / dan;\n          this.bases[i].setX(xc + rr * Math.cos(a));\n          this.bases[i].setY(yc + rr * Math.sin(a));\n        }\n      }\n    }\n\n    break;\n  }\n\n  for (ic = 0; ic < lp.getNconnection(); ic++) {\n    if (icroot != ic) {\n      cp = lp.getConnection(ic); //IM HERE\n\n      this.generate_region(cp);\n      this.traverse_loop(cp.getLoop(), cp);\n    }\n  }\n\n  n = 0;\n  sx = 0.0;\n  sy = 0.0;\n\n  for (ic = 0; ic < lp.getNconnection(); ic++) {\n    j = ic + 1;\n\n    if (j >= lp.getNconnection()) {\n      j = 0;\n    }\n\n    cp = lp.getConnection(ic);\n    cpnext = lp.getConnection(j);\n    n += 2;\n    sx += this.bases[cp.getStart()].getX() + this.bases[cp.getEnd()].getX();\n    sy += this.bases[cp.getStart()].getY() + this.bases[cp.getEnd()].getY();\n\n    if (!cp.isExtruded()) {\n      for (j = cp.getEnd() + 1; j != cpnext.getStart(); j++) {\n        if (j > this.nbase) {\n          j -= this.nbase + 1;\n        }\n\n        n++;\n        sx += this.bases[j].getX();\n        sy += this.bases[j].getY();\n      }\n    }\n  }\n\n  lp.setX(sx / n);\n  lp.setY(sy / n);\n};\n\nNAView.prototype.determine_radius = function determine_radius(lp, lencut) {\n  var mindit, ci, dt, sumn, sumd, radius, dit;\n  var i,\n      j,\n      end,\n      start,\n      imindit = 0;\n  var cp = new _connection_js__WEBPACK_IMPORTED_MODULE_1__["Connection"](),\n      cpnext = new _connection_js__WEBPACK_IMPORTED_MODULE_1__["Connection"]();\n  var rt2_2 = 0.7071068;\n\n  do {\n    mindit = 1.0e10;\n\n    for (sumd = 0.0, sumn = 0.0, i = 0; i < lp.getNconnection(); i++) {\n      cp = lp.getConnection(i);\n      j = i + 1;\n\n      if (j >= lp.getNconnection()) {\n        j = 0;\n      }\n\n      cpnext = lp.getConnection(j);\n      end = cp.getEnd();\n      start = cpnext.getStart();\n\n      if (start < end) {\n        start += this.nbase + 1;\n      }\n\n      dt = cpnext.getAngle() - cp.getAngle();\n\n      if (dt <= 0.0) {\n        dt += 2 * Math.PI;\n      }\n\n      if (!cp.isExtruded()) {\n        ci = start - end;\n      } else {\n        if (dt <= Math.PI / 2) {\n          ci = 2.0;\n        } else {\n          ci = 1.5;\n        }\n      }\n\n      sumn += dt * (1.0 / ci + 1.0);\n      sumd += dt * dt / ci;\n      dit = dt / ci;\n\n      if (dit < mindit && !cp.isExtruded() && ci > 1.0) {\n        mindit = dit;\n        imindit = i;\n      }\n    }\n\n    radius = sumn / sumd;\n\n    if (radius < rt2_2) {\n      radius = rt2_2;\n    }\n\n    if (mindit * radius < lencut) {\n      lp.getConnection(imindit).setExtruded(true);\n    }\n  } while (mindit * radius < lencut);\n\n  if (lp.getRadius() > 0.0) {\n    radius = lp.getRadius();\n  } else {\n    lp.setRadius(radius);\n  }\n};\n\nNAView.prototype.find_ic_middle = function find_ic_middle(icstart, icend, anchor_connection, acp, lp) {\n  var count, ret, ic, i;\n  var done;\n  count = 0;\n  ret = -1;\n  ic = icstart;\n  done = false;\n\n  while (!done) {\n    if (count++ > lp.getNconnection() * 2) {\n      console.log("Infinite loop in \'find_ic_middle\'");\n    }\n\n    if (anchor_connection != null && lp.getConnection(ic) == acp) {\n      ret = ic;\n    }\n\n    done = ic == icend;\n\n    if (++ic >= lp.getNconnection()) {\n      ic = 0;\n    }\n  }\n\n  if (ret == -1) {\n    for (i = 1, ic = icstart; i < (count + 1) / 2; i++) {\n      if (++ic >= lp.getNconnection()) ic = 0;\n    }\n\n    ret = ic;\n  }\n\n  return ret;\n};\n\nNAView.prototype.construct_extruded_segment = function construct_extruded_segment(cp, cpnext) {\n  var astart, aend1, aend2, aave, dx, dy, a1, a2, ac, rr, da, dac;\n  var start, end, n, nstart, nend;\n  var collision;\n  astart = cp.getAngle();\n  aend2 = aend1 = cpnext.getAngle();\n\n  if (aend2 < astart) {\n    aend2 += 2 * Math.PI;\n  }\n\n  aave = (astart + aend2) / 2.0;\n  start = cp.getEnd();\n  end = cpnext.getStart();\n  n = end - start;\n\n  if (n < 0) {\n    n += this.nbase + 1;\n  }\n\n  da = cpnext.getAngle() - cp.getAngle();\n\n  if (da < 0.0) {\n    da += 2 * Math.PI;\n  }\n\n  if (n == 2) {\n    this.construct_circle_segment(start, end);\n  } else {\n    dx = this.bases[end].getX() - this.bases[start].getX();\n    dy = this.bases[end].getY() - this.bases[start].getY();\n    rr = Math.sqrt(dx * dx + dy * dy);\n    dx /= rr;\n    dy /= rr;\n\n    if (rr >= 1.5 && da <= Math.PI / 2) {\n      nstart = start + 1;\n\n      if (nstart > this.nbase) {\n        nstart -= this.nbase + 1;\n      }\n\n      nend = end - 1;\n\n      if (nend < 0) {\n        nend += this.nbase + 1;\n      }\n\n      this.bases[nstart].setX(this.bases[start].getX() + 0.5 * dx);\n      this.bases[nstart].setY(this.bases[start].getY() + 0.5 * dy);\n      this.bases[nend].setX(this.bases[end].getX() - 0.5 * dx);\n      this.bases[nend].setY(this.bases[end].getY() - 0.5 * dy);\n      start = nstart;\n      end = nend;\n    }\n\n    do {\n      collision = false;\n      this.construct_circle_segment(start, end);\n      nstart = start + 1;\n\n      if (nstart > this.nbase) {\n        nstart -= this.nbase + 1;\n      }\n\n      dx = this.bases[nstart].getX() - this.bases[start].getX();\n      dy = this.bases[nstart].getY() - this.bases[start].getY();\n      a1 = Math.atan2(dy, dx);\n\n      if (a1 < 0.0) {\n        a1 += 2 * Math.PI;\n      }\n\n      dac = a1 - astart;\n\n      if (dac < 0.0) {\n        dac += 2 * Math.PI;\n      }\n\n      if (dac > Math.PI) {\n        collision = true;\n      }\n\n      nend = end - 1;\n\n      if (nend < 0) {\n        nend += this.nbase + 1;\n      }\n\n      dx = this.bases[nend].getX() - this.bases[end].getX();\n      dy = this.bases[nend].getY() - this.bases[end].getY();\n      a2 = Math.atan2(dy, dx);\n\n      if (a2 < 0.0) {\n        a2 += 2 * Math.PI;\n      }\n\n      dac = aend1 - a2;\n\n      if (dac < 0.0) {\n        dac += 2 * Math.PI;\n      }\n\n      if (dac > Math.PI) {\n        collision = true;\n      }\n\n      if (collision) {\n        ac = this.minf2(aave, astart + 0.5);\n        this.bases[nstart].setX(this.bases[start].getX() + Math.cos(ac));\n        this.bases[nstart].setY(this.bases[start].getY() + Math.sin(ac));\n        start = nstart;\n        ac = this.maxf2(aave, aend2 - 0.5);\n        this.bases[nend].setX(this.bases[end].getX() + Math.cos(ac));\n        this.bases[nend].setY(this.bases[end].getY() + Math.sin(ac));\n        end = nend;\n        n -= 2;\n      }\n    } while (collision && n > 1);\n  }\n};\n\nNAView.prototype.construct_circle_segment = function construct_circle_segment(start, end) {\n  var dx, dy, rr, midx, midy, xn, yn, nrx, nry, mx, my, a;\n  var l, j, i;\n  dx = this.bases[end].getX() - this.bases[start].getX();\n  dy = this.bases[end].getY() - this.bases[start].getY();\n  rr = Math.sqrt(dx * dx + dy * dy);\n  l = end - start;\n\n  if (l < 0) {\n    l += this.nbase + 1;\n  }\n\n  if (rr >= l) {\n    dx /= rr;\n    dy /= rr;\n\n    for (j = 1; j < l; j++) {\n      i = start + j;\n\n      if (i > this.nbase) {\n        i -= this.nbase + 1;\n      }\n\n      this.bases[i].setX(this.bases[start].getX() + dx * j / l);\n      this.bases[i].setY(this.bases[start].getY() + dy * j / l);\n    }\n  } else {\n    this.find_center_for_arc(l - 1, rr);\n    dx /= rr;\n    dy /= rr;\n    midx = this.bases[start].getX() + dx * rr / 2.0;\n    midy = this.bases[start].getY() + dy * rr / 2.0;\n    xn = dy;\n    yn = -dx;\n    nrx = midx + this._h * xn;\n    nry = midy + this._h * yn;\n    mx = this.bases[start].getX() - nrx;\n    my = this.bases[start].getY() - nry;\n    rr = Math.sqrt(mx * mx + my * my);\n    a = Math.atan2(my, mx);\n\n    for (j = 1; j < l; j++) {\n      i = start + j;\n\n      if (i > this.nbase) {\n        i -= this.nbase + 1;\n      }\n\n      this.bases[i].setX(nrx + rr * Math.cos(a + j * this.angleinc));\n      this.bases[i].setY(nry + rr * Math.sin(a + j * this.angleinc));\n    }\n  }\n};\n\nNAView.prototype.find_center_for_arc = function find_center_for_arc(n, b) {\n  var h, hhi, hlow, r, disc, theta, e, phi;\n  var iter;\n  hhi = (n + 1.0) / Math.PI; // changed to prevent div by zero if (ih)\n\n  hlow = -hhi - b / (n + 1.000001 - b);\n\n  if (b < 1) {\n    // otherwise we might fail below (ih)\n    hlow = 0;\n  }\n\n  iter = 0;\n\n  do {\n    h = (hhi + hlow) / 2.0;\n    r = Math.sqrt(h * h + b * b / 4.0);\n    disc = 1.0 - 0.5 / (r * r);\n\n    if (Math.abs(disc) > 1.0) {\n      console.log("Unexpected large magnitude discriminant = " + disc + " " + r);\n    }\n\n    theta = Math.acos(disc);\n    phi = Math.acos(h / r);\n    e = theta * (n + 1) + 2 * phi - 2 * Math.PI;\n\n    if (e > 0.0) {\n      hlow = h;\n    } else {\n      hhi = h;\n    }\n  } while (Math.abs(e) > 0.0001 && ++iter < this.MAXITER);\n\n  if (iter >= this.MAXITER) {\n    if (noIterationFailureYet) {\n      console.log("Iteration failed in find_center_for_arc");\n      noIterationFailureYet = false;\n    }\n\n    h = 0.0;\n    theta = 0.0;\n  }\n\n  this._h = h;\n  this.angleinc = theta;\n};\n\nNAView.prototype.generate_region = function generate_region(cp) {\n  var l, start, end, i, mate;\n  var rp;\n  rp = cp.getRegion();\n  l = 0;\n\n  if (cp.getStart() == rp.getStart1()) {\n    start = rp.getStart1();\n    end = rp.getEnd1();\n  } else {\n    start = rp.getStart2();\n    end = rp.getEnd2();\n  }\n\n  if (this.bases[cp.getStart()].getX() > this.ANUM - 100.0 || this.bases[cp.getEnd()].getX() > this.ANUM - 100.0) {\n    console.log("Bad region passed to generate_region. Coordinates not defined.");\n  }\n\n  for (i = start + 1; i <= end; i++) {\n    l++;\n    this.bases[i].setX(this.bases[cp.getStart()].getX() + this.HELIX_FACTOR * l * cp.getXrad());\n    this.bases[i].setY(this.bases[cp.getStart()].getY() + this.HELIX_FACTOR * l * cp.getYrad());\n    mate = this.bases[i].getMate();\n    this.bases[mate].setX(this.bases[cp.getEnd()].getX() + this.HELIX_FACTOR * l * cp.getXrad());\n    this.bases[mate].setY(this.bases[cp.getEnd()].getY() + this.HELIX_FACTOR * l * cp.getYrad());\n  }\n};\n\nNAView.prototype.minf2 = function minf2(x1, x2) {\n  return x1 < x2 ? x1 : x2;\n};\n\nNAView.prototype.maxf2 = function maxf2(x1, x2) {\n  return x1 > x2 ? x1 : x2;\n};\n\nNAView.prototype.connected_connection = function connected_connection(cp, cpnext) {\n  if (cp.isExtruded()) {\n    return true;\n  } else if (cp.getEnd() + 1 == cpnext.getStart()) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/naview.js?')},"./scripts/naview/radloop.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Radloop", function() { return Radloop; });\nfunction Radloop() {\n  this.radius = null;\n  this.loopnumber = null;\n  this.next = null;\n  this.prev = null;\n}\n\nRadloop.prototype.getRadius = function () {\n  return this.radius;\n};\n\nRadloop.prototype.setRadius = function (radius) {\n  this.radius = radius;\n};\n\nRadloop.prototype.getLoopnumber = function () {\n  return this.loopnumber;\n};\n\nRadloop.prototype.setLoopnumber = function (loopnumber) {\n  this.loopnumber = loopnumber;\n};\n\nRadloop.prototype.getNext = function () {\n  return this.next;\n};\n\nRadloop.prototype.setNext = function (next) {\n  this.next = next;\n};\n\nRadloop.prototype.getPrev = function () {\n  return this.prev;\n};\n\nRadloop.prototype.setPrev = function (prev) {\n  this.prev = prev;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/radloop.js?')},"./scripts/naview/region.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Region", function() { return Region; });\nfunction Region() {\n  this._start1 = null;\n  this._end1 = null;\n  this._start2 = null;\n  this._end2 = null;\n}\n\nRegion.prototype.getStart1 = function () {\n  return this._start1;\n};\n\nRegion.prototype.setStart1 = function (start1) {\n  this._start1 = start1;\n};\n\nRegion.prototype.getEnd1 = function () {\n  return this._end1;\n};\n\nRegion.prototype.setEnd1 = function (end1) {\n  this._end1 = end1;\n};\n\nRegion.prototype.getStart2 = function () {\n  return this._start2;\n};\n\nRegion.prototype.setStart2 = function (start2) {\n  this._start2 = start2;\n};\n\nRegion.prototype.getEnd2 = function () {\n  return this._end2;\n};\n\nRegion.prototype.setEnd2 = function (end2) {\n  this._end2 = end2;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/region.js?')},"./scripts/rnagraph.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProteinGraph\", function() { return ProteinGraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RNAGraph\", function() { return RNAGraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"moleculesToJson\", function() { return moleculesToJson; });\n/* harmony import */ var rnautils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rnautils */ \"../node_modules/rnautils/dist/scripts/rnautils.js\");\n/* harmony import */ var rnautils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rnautils__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar numberSort = function numberSort(a, b) {\n  return a - b;\n};\n\nfunction generateUUID() {\n  /* Stack Overflow:                                                                                          \n   * http://stackoverflow.com/a/8809472/899470                                                                \n   */\n  var d = new Date().getTime();\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction isNormalInteger(str) {\n  //http://stackoverflow.com/a/10834843/899470\n  return /^\\+?(0|[1-9]\\d*)$/.test(str);\n}\n\nif (typeof String.prototype.trim === 'undefined') {\n  String.prototype.trim = function () {\n    return String(this).replace(/^\\s+|\\s+$/g, '');\n  };\n}\n\nfunction ProteinGraph(structName, size, uid) {\n  var self = this;\n  self.type = 'protein';\n  self.size = size;\n  self.nodes = [{\n    'name': 'P',\n    'num': 1,\n    'radius': 3 * Math.sqrt(size),\n    'rna': self,\n    'nodeType': 'protein',\n    'structName': structName,\n    'elemType': 'p',\n    'size': size,\n    'uid': generateUUID()\n  }];\n  self.links = [];\n  self.uid = generateUUID();\n\n  self.addUids = function (uids) {\n    for (var i = 0; i < uids.length; i++) {\n      self.nodes[i].uid = uids[i];\n    }\n\n    return self;\n  };\n\n  self.getUids = function () {\n    /* Get the positions of each node so that they\n     * can be passed to elementsToJson later\n     */\n    uids = [];\n\n    for (var i = 0; i < self.dotbracket.length; i++) {\n      uids.push(self.nodes[i].uid);\n    }\n\n    return uids;\n  };\n}\nfunction RNAGraph(seq, dotbracket, structName, startNumber) {\n  var self = this;\n  self.type = 'rna';\n  self.circularizeExternal = false;\n\n  if (arguments.length === 0) {\n    self.seq = '';\n    self.dotbracket = '';\n    self.structName = '';\n  } else {\n    self.seq = seq;\n    self.dotbracket = dotbracket; //i.e. ..((..))..\n\n    self.structName = structName;\n  }\n\n  if (arguments.length < 4) {\n    startNumber = 1;\n  }\n\n  self.circular = false;\n\n  if (self.dotbracket.length > 0 && self.dotbracket[self.dotbracket.length - 1] == '*') {\n    //circular RNA\n    self.dotbracket = self.dotbracket.slice(0, self.dotbracket.length - 1);\n    self.circular = true;\n  }\n\n  self.uid = generateUUID();\n  self.elements = []; //store the elements and the \n  //nucleotides they contain\n\n  self.pseudoknotPairs = [];\n  self.nucsToNodes = {};\n\n  self.addUids = function (uids) {\n    var nucleotideNodes = self.nodes.filter(function (d) {\n      return d.nodeType == 'nucleotide';\n    });\n\n    for (var i = 0; i < uids.length && i < nucleotideNodes.length; i++) {\n      nucleotideNodes[i].uid = uids[i];\n    }\n\n    return self;\n  };\n\n  self.computePairtable = function () {\n    self.pairtable = rnautils__WEBPACK_IMPORTED_MODULE_0__[\"rnaUtilities\"].dotbracketToPairtable(self.dotbracket);\n  };\n\n  self.removeBreaks = function (targetString) {\n    // Remove all chain breaks (denoted with a '&', which indicate\n    // that the input represents more than one strand)\n    var breaks = [];\n    var breakIndex = -1;\n\n    while ((breakIndex = targetString.indexOf('&')) >= 0) {\n      breaks.push(breakIndex);\n      targetString = targetString.substring(0, breakIndex) + 'oo' + targetString.substring(breakIndex + 1, targetString.length);\n    }\n\n    return {\n      targetString: targetString,\n      breaks: breaks\n    };\n  };\n\n  var ret = self.removeBreaks(self.dotbracket);\n  self.dotbracket = ret.targetString;\n  self.dotBracketBreaks = ret.breaks;\n  ret = self.removeBreaks(self.seq);\n  self.seq = ret.targetString;\n  self.seqBreaks = ret.breaks;\n\n  self.calculateStartNumberArray = function () {\n    self.startNumberArray = [];\n    var breaks = 0;\n\n    for (var i = 0; i < self.dotbracket.length; i++) {\n      self.startNumberArray.push(startNumber);\n\n      if (self.dotbracket[i] == 'o') {\n        startNumber = -i;\n      }\n    }\n  };\n\n  self.calculateStartNumberArray();\n  self.rnaLength = self.dotbracket.length;\n\n  if (!Object(rnautils__WEBPACK_IMPORTED_MODULE_0__[\"arraysEqual\"])(self.dotBracketBreaks, self.seqBreaks)) {\n    console.log('WARNING: Sequence and structure breaks not equal');\n    console.log('WARNING: Using the breaks in the structure');\n  }\n\n  self.computePairtable();\n\n  self.addPositions = function (nodeType, positions) {\n    var labelNodes = self.nodes.filter(function (d) {\n      return d.nodeType == nodeType;\n    });\n\n    for (var i = 0; i < labelNodes.length; i++) {\n      labelNodes[i].x = positions[i][0];\n      labelNodes[i].px = positions[i][0];\n      labelNodes[i].y = positions[i][1];\n      labelNodes[i].py = positions[i][1];\n    }\n\n    return self;\n  };\n\n  self.breakNodesToFakeNodes = function () {\n    // convert all the nodes following breaks to fake nodes\n    var labelNodes = self.nodes.filter(function (d) {\n      return d.nodeType == 'nucleotide';\n    }); // if a node was an artifical break node, convert it to a middle\n\n    for (var i = 0; i < labelNodes.length; i++) {\n      if (self.dotbracket[i] == 'o') labelNodes[i].nodeType = 'middle';\n    }\n\n    for (var i = 0; i < self.elements.length; i++) {\n      var broken = false; // change the elemType of the other nodes in the element containing\n      // the break\n\n      for (var j = 0; j < self.elements[i][2].length; j++) {\n        if (self.dotBracketBreaks.indexOf(self.elements[i][2][j]) >= 0) broken = true;\n      }\n\n      if (broken) {\n        self.elements[i][2].map(function (x) {\n          if (x == 0) return;\n          self.nodes[x - 1].elemType = 'e';\n        });\n      } else {\n        self.elements[i][2].map(function (x) {\n          if (x == 0) return;\n          self.nodes[x - 1].elemType = self.elements[i][0];\n        });\n      }\n    }\n\n    return self;\n  };\n\n  self.getPositions = function (nodeType) {\n    var positions = [];\n    var nucleotideNodes = self.nodes.filter(function (d) {\n      return d.nodeType == nodeType;\n    });\n\n    for (var i = 0; i < nucleotideNodes.length; i++) {\n      positions.push([nucleotideNodes[i].x, nucleotideNodes[i].y]);\n    }\n\n    return positions;\n  };\n\n  self.getUids = function () {\n    /* Get the positions of each node so that they\n     * can be passed to elementsToJson later\n     */\n    var uids = [];\n\n    for (var i = 0; i < self.dotbracket.length; i++) {\n      uids.push(self.nodes[i].uid);\n    }\n\n    return uids;\n  };\n\n  self.reinforceStems = function () {\n    var pt = self.pairtable;\n    var relevantElements = self.elements.filter(function (d) {\n      return d[0] == 's' && d[2].length >= 4;\n    });\n\n    for (var i = 0; i < relevantElements.length; i++) {\n      var allNucs = relevantElements[i][2];\n      var nucs = allNucs.slice(0, allNucs.length / 2);\n\n      for (var j = 0; j < nucs.length - 1; j++) {\n        self.addFakeNode([nucs[j], nucs[j + 1], pt[nucs[j + 1]], pt[nucs[j]]]);\n      }\n    }\n\n    return self;\n  };\n\n  self.reinforceLoops = function () {\n    /* \n     * Add a set of fake nodes to enforce the structure\n     */\n    var filterNucs = function filterNucs(d) {\n      return d !== 0 && d <= self.dotbracket.length;\n    };\n\n    for (var i = 0; i < self.elements.length; i++) {\n      if (self.elements[i][0] == 's' || !self.circularizeExternal && self.elements[i][0] == 'e') continue;\n      var nucs = self.elements[i][2].filter(filterNucs);\n\n      if (self.elements[i][0] == 'e') {\n        var newNode1 = {\n          'name': '',\n          'num': -3,\n          //'radius': 18 * radius -6,\n          'radius': 0,\n          'rna': self,\n          'nodeType': 'middle',\n          'elemType': 'f',\n          'nucs': [],\n          'x': self.nodes[self.rnaLength - 1].x,\n          'y': self.nodes[self.rnaLength - 1].y,\n          'px': self.nodes[self.rnaLength - 1].px,\n          'py': self.nodes[self.rnaLength - 1].py,\n          'uid': generateUUID()\n        };\n        var newNode2 = {\n          'name': '',\n          'num': -2,\n          //'radius': 18 * radius -6,\n          'radius': 0,\n          'rna': self,\n          'nodeType': 'middle',\n          'elemType': 'f',\n          'nucs': [],\n          'x': self.nodes[0].x,\n          'y': self.nodes[0].y,\n          'px': self.nodes[0].px,\n          'py': self.nodes[0].py,\n          'uid': generateUUID()\n        };\n        nucs.push(self.nodes.length + 1);\n        nucs.push(self.nodes.length + 2);\n        self.nodes.push(newNode1);\n        self.nodes.push(newNode2);\n      }\n\n      self.addFakeNode(nucs);\n    }\n\n    return self;\n  };\n\n  self.updateLinkUids = function () {\n    for (var i = 0; i < self.links.length; i++) {\n      self.links[i].uid = self.links[i].source.uid + self.links[i].target.uid;\n    }\n\n    return self;\n  };\n\n  self.addFakeNode = function (nucs) {\n    var linkLength = 18; //make sure this is consistent with the value in force.js\n\n    var nodeWidth = 6;\n    var angle = 3.1415 * 2 / (2 * nucs.length);\n    var radius = linkLength / (2 * Math.tan(angle));\n    var fakeNodeUid = '';\n\n    for (var i = 0; i < nucs.length; i++) {\n      fakeNodeUid += self.nodes[nucs[i] - 1].uid;\n    }\n\n    var newNode = {\n      'name': '',\n      'num': -1,\n      //'radius': 18 * radius -6,\n      'radius': radius,\n      'rna': self,\n      'nodeType': 'middle',\n      'elemType': 'f',\n      'nucs': nucs,\n      'uid': fakeNodeUid\n    };\n    self.nodes.push(newNode);\n    var newX = 0;\n    var newY = 0;\n    var coordsCounted = 0;\n    angle = (nucs.length - 2) * 3.14159 / (2 * nucs.length);\n    radius = 0.5 / Math.cos(angle);\n\n    for (var j = 0; j < nucs.length; j++) {\n      if (nucs[j] === 0 || nucs[j] > self.dotbracket.length) continue; //link to the center node\n\n      self.links.push({\n        'source': self.nodes[nucs[j] - 1],\n        'target': self.nodes[self.nodes.length - 1],\n        'linkType': 'fake',\n        'value': radius,\n        'uid': generateUUID()\n      });\n\n      if (nucs.length > 4) {\n        //link across the loop\n        self.links.push({\n          'source': self.nodes[nucs[j] - 1],\n          'target': self.nodes[nucs[(j + Math.floor(nucs.length / 2)) % nucs.length] - 1],\n          'linkType': 'fake',\n          'value': radius * 2,\n          'uid': generateUUID()\n        });\n      }\n\n      var ia = (nucs.length - 2) * 3.14159 / nucs.length;\n      var c = 2 * Math.cos(3.14159 / 2 - ia / 2); //link to over-neighbor\n\n      self.links.push({\n        'source': self.nodes[nucs[j] - 1],\n        'target': self.nodes[nucs[(j + 2) % nucs.length] - 1],\n        'linkType': 'fake',\n        'value': c\n      }); // calculate the mean of the coordinats in this loop\n      // and place the fake node there\n\n      var fromNode = self.nodes[nucs[j] - 1];\n\n      if ('x' in fromNode) {\n        newX += fromNode.x;\n        newY += fromNode.y;\n        coordsCounted += 1;\n      }\n    }\n\n    if (coordsCounted > 0) {\n      // the nucleotides had set positions so we can calculate the position\n      // of the fake node\n      newNode.x = newX / coordsCounted;\n      newNode.y = newY / coordsCounted;\n      newNode.px = newNode.x;\n      newNode.py = newNode.y;\n    }\n\n    return self;\n  };\n\n  self.connectFakeNodes = function () {\n    var linkLength = 18; // We want to be able to connect all of the fake nodes\n    // and create a structure consisting of just them\n\n    var filterOutNonFakeNodes = function filterOutNonFakeNodes(d) {\n      return d.nodeType == 'middle';\n    };\n\n    var nucsToNodes = {};\n    var fakeNodes = self.nodes.filter(filterOutNonFakeNodes);\n    var linked = new Set(); // initialize the nucleotides to nodes\n\n    for (var i = 1; i <= self.nodes.length; i++) {\n      nucsToNodes[i] = [];\n    }\n\n    for (var i = 0; i < fakeNodes.length; i++) {\n      var thisNode = fakeNodes[i]; // each fake node represents a certain set of nucleotides (thisNode.nucs)\n\n      for (var j = 0; j < thisNode.nucs.length; j++) {\n        var thisNuc = thisNode.nucs[j]; // check to see if this nucleotide has been seen in another fake node\n        // if it has, then we add a link between the two nodes\n\n        for (var k = 0; k < nucsToNodes[thisNuc].length; k++) {\n          if (linked.has(JSON.stringify([nucsToNodes[thisNuc][k].uid, thisNode.uid].sort()))) continue; //already linked\n\n          var distance = nucsToNodes[thisNuc][k].radius + thisNode.radius;\n          self.links.push({\n            'source': nucsToNodes[thisNuc][k],\n            'target': thisNode,\n            'value': distance / linkLength,\n            'linkType': 'fake_fake'\n          }); // note that we've already seen this link\n\n          linked.add(JSON.stringify([nucsToNodes[thisNuc][k].uid, thisNode.uid].sort()));\n        }\n\n        nucsToNodes[thisNuc].push(thisNode);\n      }\n    }\n\n    return self;\n  };\n\n  self.addExtraLinks = function (extraLinks) {\n    if (typeof extraLinks == 'undefined') return self;\n\n    for (var i = 0; i < extraLinks.length; i++) {\n      var source = self.getNodeFromNucleotides(extraLinks[i].from);\n      var target = self.getNodeFromNucleotides(extraLinks[i].to);\n      var newLink = {\n        'source': source,\n        'target': target,\n        'linkType': 'extra',\n        'extraLinkType': extraLinks[i].linkType,\n        'uid': generateUUID()\n      };\n      self.links.push(newLink);\n    }\n\n    return self;\n  };\n\n  self.elementsToJson = function () {\n    /* Convert a set of secondary structure elements to a json\n     * representation of the graph that can be used with d3's\n     * force-directed layout to generate a visualization of \n     * the structure.\n     */\n    var pt = self.pairtable;\n    var elements = self.elements;\n    self.nodes = [];\n    self.links = []; //create a reverse lookup so we can find out the type\n    //of element that a node is part of\n\n    var elemTypes = {}; //sort so that we count stems last\n\n    self.elements.sort();\n\n    for (var i = 0; i < self.elements.length; i++) {\n      var nucs = self.elements[i][2];\n\n      for (var j = 0; j < nucs.length; j++) {\n        elemTypes[nucs[j]] = self.elements[i][0];\n      }\n    }\n\n    for (var i = 1; i <= pt[0]; i++) {\n      var nodeName = self.seq[i - 1];\n\n      if (self.dotBracketBreaks.indexOf(i - 1) >= 0 || self.dotBracketBreaks.indexOf(i - 2) >= 0) {\n        nodeName = '';\n      } //create a node for each nucleotide\n\n\n      self.nodes.push({\n        'name': nodeName,\n        'num': i + self.startNumberArray[i - 1] - 1,\n        'radius': 5,\n        'rna': self,\n        'nodeType': 'nucleotide',\n        'structName': self.structName,\n        'elemType': elemTypes[i],\n        'uid': generateUUID(),\n        'linked': false\n      });\n    }\n\n    for (var i = 0; i < self.nodes.length; i++) {\n      if (i === 0) self.nodes[i].prevNode = null;else {\n        self.nodes[i].prevNode = self.nodes[i - 1];\n      }\n      if (i == self.nodes.length - 1) self.nodes[i].nextNode = null;else {\n        self.nodes[i].nextNode = self.nodes[i + 1];\n      }\n    }\n\n    for (var i = 1; i <= pt[0]; i++) {\n      if (pt[i] !== 0) {\n        // base-pair links\n        self.links.push({\n          'source': self.nodes[i - 1],\n          'target': self.nodes[pt[i] - 1],\n          'linkType': 'basepair',\n          'value': 1,\n          'uid': generateUUID()\n        });\n      }\n\n      if (i > 1) {\n        // backbone links\n        if (self.dotBracketBreaks.indexOf(i - 1) === -1 && self.dotBracketBreaks.indexOf(i - 2) == -1 && self.dotBracketBreaks.indexOf(i - 3) == -1) {\n          // there is no break in the strands here\n          // we can add a backbone link\n          self.links.push({\n            'source': self.nodes[i - 2],\n            'target': self.nodes[i - 1],\n            'linkType': 'backbone',\n            'value': 1,\n            'uid': generateUUID()\n          });\n          self.nodes[i - 1].linked = true;\n        }\n      }\n    } //add the pseudoknot links\n\n\n    for (var i = 0; i < self.pseudoknotPairs.length; i++) {\n      self.links.push({\n        'source': self.nodes[self.pseudoknotPairs[i][0] - 1],\n        'target': self.nodes[self.pseudoknotPairs[i][1] - 1],\n        'linkType': 'pseudoknot',\n        'value': 1,\n        'uid': generateUUID()\n      });\n    }\n\n    if (self.circular) {\n      self.links.push({\n        'source': self.nodes[0],\n        'target': self.nodes[self.rnaLength - 1],\n        'linkType': 'backbone',\n        'value': 1,\n        'uid': generateUUID()\n      });\n    }\n\n    return self;\n  };\n\n  self.ptToElements = function (pt, level, i, j) {\n    /* Convert a pair table to a list of secondary structure \n     * elements:\n     *\n     * [['s',1,[2,3]]\n     *\n     * The 's' indicates that an element can be a stem. It can also be\n     * an interior loop ('i'), a hairpin loop ('h') or a multiloop ('m')\n     *\n     * The second number (1 in this case) indicates the depth or\n     * how many base pairs have to be broken to get to this element.\n     *\n     * Finally, there is the list of nucleotides which are part of\n     * of this element.\n     */\n    var elements = [];\n    var u5 = [i - 1];\n    var u3 = [j + 1];\n    if (i > j) return []; //iterate over the unpaired regions on either side\n    //this is either 5' and 3' unpaired if level == 0\n    //or an interior loop or a multiloop\n\n    for (; pt[i] === 0; i++) {\n      u5.push(i);\n    }\n\n    for (; pt[j] === 0; j--) {\n      u3.push(j);\n    }\n\n    if (i > j) {\n      //hairpin loop or one large unpaired molecule\n      u5.push(i);\n      if (level === 0) return [['e', level, u5.sort(numberSort)]];else {\n        // check to see if we have chain breaks due\n        // to multiple strands in the input\n        var external = false;\n        var left = [];\n        var right = [];\n\n        for (var k = 0; k < u5.length; k++) {\n          if (external) right.push(u5[k]);else left.push(u5[k]);\n          if (self.dotBracketBreaks.indexOf(u5[k]) >= 0) external = true;\n        }\n\n        if (external) {\n          return [['h', level, u5.sort(numberSort)]];\n        } else // if not, this is a simple hairpin loop\n          return [['h', level, u5.sort(numberSort)]];\n      }\n    }\n\n    if (pt[i] != j) {\n      //multiloop\n      var m = u5;\n      var k = i; // the nucleotide before and the starting nucleotide\n\n      m.push(k);\n\n      while (k <= j) {\n        // recurse into a stem\n        elements = elements.concat(self.ptToElements(pt, level, k, pt[k])); // add the nucleotides between stems\n\n        m.push(pt[k]);\n        k = pt[k] + 1;\n\n        for (; pt[k] === 0 && k <= j; k++) {\n          m.push(k);\n        }\n\n        m.push(k);\n      }\n\n      m.pop();\n      m = m.concat(u3);\n\n      if (m.length > 0) {\n        if (level === 0) elements.push(['e', level, m.sort(numberSort)]);else elements.push(['m', level, m.sort(numberSort)]);\n      }\n\n      return elements;\n    }\n\n    if (pt[i] === j) {\n      //interior loop\n      u5.push(i);\n      u3.push(j);\n      var combined = u5.concat(u3);\n\n      if (combined.length > 4) {\n        if (level === 0) elements.push(['e', level, u5.concat(u3).sort(numberSort)]);else elements.push(['i', level, u5.concat(u3).sort(numberSort)]);\n      }\n    }\n\n    var s = []; //go through the stem\n\n    while (pt[i] === j && i < j) {\n      //one stem\n      s.push(i);\n      s.push(j);\n      i += 1;\n      j -= 1;\n      level += 1;\n    }\n\n    u5 = [i - 1];\n    u3 = [j + 1];\n    elements.push(['s', level, s.sort(numberSort)]);\n    return elements.concat(self.ptToElements(pt, level, i, j));\n  };\n\n  self.addLabels = function (startNumber, labelInterval) {\n    if (arguments.length === 0) {\n      startNumber = 1;\n      labelInterval = 10;\n    }\n\n    if (arguments.length === 1) labelInterval = 10;\n    if (labelInterval === 0) return self;\n    if (labelInterval <= 0) console.log('The label interval entered in invalid:', labelInterval);\n\n    for (var i = 1; i <= self.pairtable[0]; i++) {\n      // add labels\n      if (i % labelInterval === 0) {\n        //create a node for each label\n        var newX, newY;\n        var thisNode = self.nodes[i - 1];\n        var prevNode, nextNode;\n        var prevVec, nextVec;\n\n        if (self.rnaLength == 1) {\n          nextVec = [thisNode.x - 15, thisNode.y];\n          prevVec = [thisNode.x - 15, thisNode.y];\n        } else {\n          // if we're labelling the first node, then label it in relation to the last\n          if (i == 1) prevNode = self.nodes[self.rnaLength - 1];else prevNode = self.nodes[i - 2]; // if we're labelling the last node, then label it in relation to the first\n\n          if (i == self.rnaLength) nextNode = self.nodes[0];else nextNode = self.nodes[i]; // this nucleotide and its neighbors are paired\n\n          if (self.pairtable[nextNode.num] !== 0 && self.pairtable[prevNode.num] !== 0 && self.pairtable[thisNode.num] !== 0) {\n            prevNode = nextNode = self.nodes[self.pairtable[thisNode.num] - 1];\n          } // this node is paired but at least one of its neighbors is unpaired\n          // place the label in the direction of the two neighbors\n\n\n          if (self.pairtable[thisNode.num] !== 0 && (self.pairtable[nextNode.num] === 0 || self.pairtable[prevNode.num] === 0)) {\n            nextVec = [thisNode.x - nextNode.x, thisNode.y - nextNode.y];\n            prevVec = [thisNode.x - prevNode.x, thisNode.y - prevNode.y];\n          } else {\n            nextVec = [nextNode.x - thisNode.x, nextNode.y - thisNode.y];\n            prevVec = [prevNode.x - thisNode.x, prevNode.y - thisNode.y];\n          }\n        }\n\n        var combinedVec = [nextVec[0] + prevVec[0], nextVec[1] + prevVec[1]];\n        var vecLength = Math.sqrt(combinedVec[0] * combinedVec[0] + combinedVec[1] * combinedVec[1]);\n        var normedVec = [combinedVec[0] / vecLength, combinedVec[1] / vecLength];\n        var offsetVec = [-15 * normedVec[0], -15 * normedVec[1]];\n        var newX = self.nodes[i - 1].x + offsetVec[0];\n        var newY = self.nodes[i - 1].y + offsetVec[1];\n        var newNode = {\n          'name': i + self.startNumberArray[i - 1] - 1,\n          'num': -1,\n          'radius': 6,\n          'rna': self,\n          'nodeType': 'label',\n          'structName': self.structName,\n          'elemType': 'l',\n          'x': newX,\n          'y': newY,\n          'px': newX,\n          'py': newY,\n          'uid': generateUUID()\n        };\n        var newLink = {\n          'source': self.nodes[i - 1],\n          'target': newNode,\n          'value': 1,\n          'linkType': 'label_link',\n          'uid': generateUUID()\n        };\n        self.nodes.push(newNode);\n        self.links.push(newLink);\n      }\n    }\n\n    return self;\n  };\n\n  self.recalculateElements = function () {\n    self.removePseudoknots();\n    self.elements = self.ptToElements(self.pairtable, 0, 1, self.dotbracket.length);\n\n    if (self.circular) {\n      //check to see if the external loop is a hairpin or a multiloop\n      externalLoop = self.elements.filter(function (d) {\n        if (d[0] == 'e') return true;\n      });\n\n      if (externalLoop.length > 0) {\n        eloop = externalLoop[0];\n        nucs = eloop[2].sort(numberSort);\n        prev = nucs[0];\n        hloop = true;\n        numGreater = 0;\n\n        for (var i = 1; i < nucs.length; i++) {\n          if (nucs[i] - prev > 1) {\n            numGreater += 1;\n          }\n\n          prev = nucs[i];\n        }\n\n        if (numGreater == 1) {\n          eloop[0] = 'h';\n        } else if (numGreater == 2) {\n          eloop[0] = 'i';\n        } else {\n          eloop[0] = 'm';\n        }\n      }\n    }\n\n    return self;\n  };\n\n  self.reassignLinkUids = function () {\n    // reassign uids to the links, corresponding to the uids of the two nodes\n    // they connect\n    var i;\n\n    for (var i = 0; i < self.links.length; i++) {\n      self.links[i].uid = self.links[i].source.uid + self.links[i].target.uid;\n    }\n\n    return self;\n  };\n\n  self.removePseudoknots = function () {\n    if (self.pairtable.length > 1) self.pseudoknotPairs = self.pseudoknotPairs.concat(rnautils__WEBPACK_IMPORTED_MODULE_0__[\"rnaUtilities\"].removePseudoknotsFromPairtable(self.pairtable));\n    return self;\n  };\n\n  self.addPseudoknots = function () {\n    /* Add all of the pseudoknot pairs which are stored outside\n     * of the pairtable back to the pairtable\n     */\n    var pt = self.pairtable;\n    var pseudoknotPairs = self.pseudoknotPairs;\n\n    for (var i = 0; i < pseudoknotPairs.length; i++) {\n      pt[pseudoknotPairs[i][0]] = pseudoknotPairs[i][1];\n      pt[pseudoknotPairs[i][1]] = pseudoknotPairs[i][0];\n    }\n\n    self.pseudoknotPairs = [];\n    return self;\n  };\n\n  self.addName = function (name) {\n    if (typeof name == 'undefined') {\n      self.name = '';\n      return self;\n    } else {\n      self.name = name;\n      return self;\n    }\n  };\n\n  if (self.rnaLength > 0) self.recalculateElements();\n}\nfunction moleculesToJson(moleculesJson) {\n  /* Convert a list of RNA and protein molecules to a list of RNAGraph\n   * ProteinGraph and extraLinks structure */\n  var nodes = {}; //index the nodes by uid\n\n  var graphs = [];\n  var extraLinks = []; // Create the graphs for each molecule\n\n  for (var i = 0; i < moleculesJson.molecules.length; i++) {\n    var molecule = moleculesJson.molecules[i];\n    var rg;\n\n    if (molecule.type == 'rna') {\n      rg = new RNAGraph(molecule.seq, molecule.ss, molecule.header);\n      rg.circularizeExternal = true;\n      rg.elementsToJson().addPositions('nucleotide', molecule.positions).addLabels().reinforceStems().reinforceLoops();\n    } else if (molecule.type == 'protein') {\n      rg = new ProteinGraph(molecule.header, molecule.size);\n    }\n\n    rg.addUids(molecule.uids);\n\n    for (var j = 0; j < rg.nodes.length; j++) {\n      nodes[rg.nodes[j].uid] = rg.nodes[j];\n    }\n\n    graphs.push(rg);\n  } //Add the extra links\n\n\n  for (var i = 0; i < moleculesJson.extraLinks.length; i++) {\n    link = moleculesJson.extraLinks[i];\n    link.source = nodes[link.source];\n    link.target = nodes[link.target];\n    link.uid = generateUUID();\n    extraLinks.push(link);\n  }\n\n  return {\n    'graphs': graphs,\n    'extraLinks': extraLinks\n  };\n}\n;\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/rnagraph.js?")},"./scripts/rnaplot.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rnaPlot\", function() { return rnaPlot; });\n/* harmony import */ var _simplernaplot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./simplernaplot.js */ \"./scripts/simplernaplot.js\");\n/* harmony import */ var _rnagraph_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rnagraph.js */ \"./scripts/rnagraph.js\");\n/* harmony import */ var _naview_naview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./naview/naview.js */ \"./scripts/naview/naview.js\");\n/* harmony import */ var rnautils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rnautils */ \"../node_modules/rnautils/dist/scripts/rnautils.js\");\n/* harmony import */ var rnautils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(rnautils__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _styles_rnaplot_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../styles/rnaplot.css */ \"./styles/rnaplot.css\");\n\n\n\n\n\n\nfunction isNormalInteger(str) {\n  //http://stackoverflow.com/a/10834843/899470\n  return /^\\+?(0|[1-9]\\d*)$/.test(str);\n}\n\nif (typeof String.prototype.trim === 'undefined') {\n  String.prototype.trim = function () {\n    return String(this).replace(/^\\s+|\\s+$/g, '');\n  };\n}\n\nfunction rnaPlot() {\n  var options = {\n    width: 400,\n    height: 400,\n    nucleotideRadius: 5,\n    rnaEdgePadding: 0,\n    // how far the leftmost, rightmost, topmost and bottomost\n    // nucleotides are from the edge of the plot\n    labelInterval: 0,\n    showNucleotideLabels: true,\n    startNucleotideNumber: 1,\n    bundleExternalLinks: false\n  };\n  var xScale, yScale;\n\n  function createTransformToFillViewport(xValues, yValues) {\n    var molName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    // create transform that will scale the x and y values so that\n    // they fill the available viewport\n    // find out leftmost, rightmost, topmost, bottommost positions of each\n    // nucleotide so that we can create a scale\n    var xExtent = d3.extent(xValues);\n    var yExtent = d3.extent(yValues);\n    var NAME_OFFSET = 30;\n    if (molName != '') yExtent[1] += NAME_OFFSET; // add the radius of the nucleotides\n\n    xExtent[0] -= options.nucleotideRadius + options.rnaEdgePadding;\n    yExtent[0] -= options.nucleotideRadius + options.rnaEdgePadding;\n    xExtent[1] += options.nucleotideRadius + options.rnaEdgePadding;\n    yExtent[1] += options.nucleotideRadius + options.rnaEdgePadding; // find out how wide and height the molecule\n\n    var xRange = xExtent[1] - xExtent[0];\n    var yRange = yExtent[1] - yExtent[0]; // how much wider / taller is it than the available viewport\n\n    var xExtra = xRange - options.width;\n    var yExtra = yRange - options.height; // once we have a scale for one dimension, we can create the scale for the other\n    // keeping the same expansion / shrinking ratio\n\n    function createOtherScale(firstScale, newDomain, newRange) {\n      var scaleFactor = (firstScale.range()[1] - firstScale.range()[0]) / (firstScale.domain()[1] - firstScale.domain()[0]);\n      var newWidth = (newDomain[1] - newDomain[0]) * scaleFactor;\n      var newMargin = (newRange[1] - newRange[0] - newWidth) / 2;\n      return {\n        'scaleFactor': scaleFactor,\n        'scale': d3.scale.linear().domain(newDomain).range([newRange[0] + newMargin, newRange[1] - newMargin])\n      };\n    }\n\n    var ret;\n\n    if (xExtra > yExtra) {\n      // we have to shrink more in the x-dimension than the y\n      xScale = d3.scale.linear().domain(xExtent).range([0, options.width]);\n      ret = createOtherScale(xScale, yExtent, [0, options.height]);\n      yScale = ret.scale;\n    } else {\n      // we have to shrink more in the x-dimension than the y\n      yScale = d3.scale.linear().domain(yExtent).range([0, options.height]);\n      ret = createOtherScale(yScale, xExtent, [0, options.width]);\n      xScale = ret.scale;\n    }\n\n    var xOffset = xScale.range()[0] - xScale.domain()[0];\n    var yOffset = yScale.range()[0] - yScale.domain()[0];\n    return 'translate(' + -(xScale.domain()[0] * ret.scaleFactor - xScale.range()[0]) + ',' + -(yScale.domain()[0] * ret.scaleFactor - yScale.range()[0]) + ')' + 'scale(' + ret.scaleFactor + ')';\n  }\n\n  function createNucleotides(selection, nucleotideNodes) {\n    // create groupings for each nucleotide and label\n    var gs = selection.selectAll('.rna-base').data(nucleotideNodes).enter().append('svg:g').attr('transform', function (d) {\n      return 'translate(' + d.x + ',' + d.y + ')';\n    });\n    var circles = gs.append('svg:circle').attr('r', options.nucleotideRadius).classed('rna-base', true);\n\n    if (options.showNucleotideLabels) {\n      var nucleotideLabels = gs.append('svg:text').text(function (d) {\n        return d.name;\n      }).attr('text-anchor', 'middle').attr('dominant-baseline', 'central').classed('nucleotide-label', true).append('svg:title').text(function (d) {\n        return d.struct_name + ':' + d.num;\n      });\n    }\n  }\n\n  function createLabels(selection, labelNodes) {\n    // create groupings for each nucleotide and label\n    var gs = selection.selectAll('.rnaLabel').data(labelNodes).enter().append('svg:g').attr('transform', function (d) {\n      return 'translate(' + d.x + ',' + d.y + ')';\n    });\n    var numberLabels = gs.append('svg:text').text(function (d) {\n      return d.name;\n    }).attr('text-anchor', 'middle').attr('font-weight', 'bold').attr('dominant-baseline', 'central').classed('number-label', true);\n  }\n\n  function createName(selection, name) {\n    selection.append('svg:text').attr('transform', 'translate(' + xScale.invert(options.width / 2) + ',' + yScale.invert(options.height) + ')').attr('dy', -10).classed('rna-name', true).text(name);\n  }\n\n  function makeExternalLinksBundle(selection, links) {\n    var nodesDict = {};\n    var linksList = [];\n    links = links.filter(function (d) {\n      return d.linkType == 'correct' || d.linkType == 'incorrect' || d.linkType == 'extra';\n    });\n    selection.selectAll('[link-type=extra]').remove();\n\n    for (var i = 0; i < links.length; i++) {\n      if (links[i].source === null || links[i].target === null) continue;\n      nodesDict[links[i].source.uid] = links[i].source;\n      nodesDict[links[i].target.uid] = links[i].target;\n      linksList.push({\n        'source': links[i].source.uid,\n        'target': links[i].target.uid,\n        'linkType': links[i].linkType,\n        'extraLinkType': links[i].extraLinkType\n      });\n    }\n\n    var fbundling = d3.ForceEdgeBundling().nodes(nodesDict).edges(linksList).compatibility_threshold(0.8).step_size(0.2);\n    var results = fbundling();\n    var d3line = d3.svg.line().x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).interpolate('linear');\n\n    for (var i = 0; i < results.length; i++) {\n      var edge_subpoint_data = results[i]; // for each of the arrays in the results\n      // draw a line between the subdivions points for that edge\n\n      selection.append('path').attr('d', d3line(edge_subpoint_data)).style('fill', 'none').attr('link-type', function (d) {\n        return linksList[i].linkType;\n      }).attr('extra-link-type', function (d) {\n        return linksList[i].extraLinkType;\n      }).style('stroke-opacity', 0.4); //use opacity as blending\n    }\n  }\n\n  function createLinks(selection, links) {\n    links = links.filter(function (d) {\n      return d.source !== null && d.target !== null;\n    });\n    var gs = selection.selectAll('.rna-link').data(links).enter().append('svg:line').attr('x1', function (d) {\n      return d.source.x;\n    }).attr('x2', function (d) {\n      return d.target.x;\n    }).attr('y1', function (d) {\n      return d.source.y;\n    }).attr('y2', function (d) {\n      return d.target.y;\n    }).attr('link-type', function (d) {\n      return d.linkType;\n    }).attr('extra-link-type', function (d) {\n      return d.extraLinkType;\n    }).classed('rna-link', true);\n  }\n\n  function chart(selection) {\n    selection.each(function (data) {\n      // data should be a dictionary containing at least a structure\n      // and possibly a sequence\n      var rg = new _rnagraph_js__WEBPACK_IMPORTED_MODULE_1__[\"RNAGraph\"](data.sequence, data.structure, data.name).recalculateElements().elementsToJson().addName(data.name);\n      data.rnaGraph = rg; // calculate the position of each nucleotide\n      // the positions of the labels will be calculated in\n      // the addLabels function\n      //var positions = simpleXyCoordinates(rg.pairtable);\n\n      var naview = new _naview_naview_js__WEBPACK_IMPORTED_MODULE_2__[\"NAView\"]();\n      var naViewPositions = naview.naview_xy_coordinates(rg.pairtable);\n      var positions = [];\n\n      for (var i = 0; i < naViewPositions.nbase; i++) {\n        positions.push([naViewPositions.x[i], naViewPositions.y[i]]);\n      }\n\n      rg.addPositions('nucleotide', positions).reinforceStems().reinforceLoops().addExtraLinks(data.extraLinks).addLabels(options.startNucleotideNumber, options.labelInterval); // create a transform that will fit the molecule to the\n      // size of the viewport (canvas, svg, whatever)\n\n      var fillViewportTransform = createTransformToFillViewport(rg.nodes.map(function (d) {\n        return d.x;\n      }), rg.nodes.map(function (d) {\n        return d.y;\n      }));\n      var gTransform = d3.select(this).append('g').attr('transform', fillViewportTransform);\n      var nucleotideNodes = rg.nodes.filter(function (d) {\n        return d.nodeType == 'nucleotide';\n      });\n      var labelNodes = rg.nodes.filter(function (d) {\n        return d.nodeType == 'label';\n      });\n      var links = rg.links;\n      createLinks(gTransform, links);\n      createNucleotides(gTransform, nucleotideNodes);\n      createLabels(gTransform, labelNodes);\n      createName(gTransform, data.name);\n\n      if (options.bundleExternalLinks) {\n        makeExternalLinksBundle(gTransform, links);\n      }\n    });\n  }\n\n  chart.width = function (_) {\n    if (!arguments.length) return options.width;\n    options.width = _;\n    return chart;\n  };\n\n  chart.height = function (_) {\n    if (!arguments.length) return options.height;\n    options.height = _;\n    return chart;\n  };\n\n  chart.showNucleotideLabels = function (_) {\n    if (!arguments.length) return options.showNucleotideLabels;\n    options.showNucleotideLabels = _;\n    return chart;\n  };\n\n  chart.rnaEdgePadding = function (_) {\n    if (!arguments.length) return options.rnaEdgePadding;\n    options.rnaEdgePadding = _;\n    return chart;\n  };\n\n  chart.nucleotideRadius = function (_) {\n    if (!arguments.length) return options.nucleotideRadius;\n    options.nucleotideRadius = _;\n    return chart;\n  };\n\n  chart.labelInterval = function (_) {\n    if (!arguments.length) return options.labelInterval;\n    options.labelInterval = _;\n    return chart;\n  };\n\n  chart.showNucleotideLabels = function (_) {\n    if (!arguments.length) return options.showNucleotideLabels;\n    options.showNucleotideLabels = _;\n    return chart;\n  };\n\n  chart.startNucleotideNumber = function (_) {\n    if (!arguments.length) return options.startNucleotideNumber;\n    options.startNucleotideNumber = _;\n    return chart;\n  };\n\n  chart.bundleExternalLinks = function (_) {\n    if (!arguments.length) return options.bundleExternalLinks;\n    options.bundleExternalLinks = _;\n    return chart;\n  };\n\n  return chart;\n}\n\nvar number_sort = function number_sort(a, b) {\n  return a - b;\n};\n\nfunction RNAUtilities() {\n  var self = this; // the brackets to use when constructing dotbracket strings\n  // with pseudoknots\n\n  self.bracket_left = '([{<ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n  self.bracket_right = ')]}>abcdefghijklmnopqrstuvwxyz'.split('');\n\n  self.inverse_brackets = function (bracket) {\n    res = {};\n\n    for (i = 0; i < bracket.length; i++) {\n      res[bracket[i]] = i;\n    }\n\n    return res;\n  };\n\n  self.maximumMatching = function maximumMatching(pt) {\n    // Courtesy of the great Ronny Lorenz\n    var n = pt[0];\n    var TURN = 0; //minimal number of nucleotides in the hairpin\n\n    /* array init */\n\n    mm = new Array(n + 1);\n\n    for (var i = 0; i <= n; i++) {\n      mm[i] = new Array(n + 1);\n\n      for (var j = i; j <= n; j++) {\n        mm[i][j] = 0;\n      }\n    }\n\n    var maximum = 0;\n    /* actual computation */\n\n    for (var i = n - TURN - 1; i > 0; i--) {\n      for (var j = i + TURN + 1; j <= n; j++) {\n        maximum = mm[i][j - 1];\n\n        for (var l = j - TURN - 1; l >= i; l--) {\n          if (pt[l] === j) {\n            // we have a base pair here\n            maximum = Math.max(maximum, (l > i ? mm[i][l - 1] : 0) + 1 + (j - l - 1 > 0 ? mm[l + 1][j - 1] : 0));\n          }\n        }\n\n        mm[i][j] = maximum;\n      }\n    }\n\n    maximum = mm[1][n];\n    return mm;\n  };\n\n  self.backtrackMaximumMatching = function (mm, old_pt) {\n    var pt = Array.apply(null, Array(mm.length)).map(function () {\n      return 0;\n    }); //create an array containing zeros\n\n    self.mm_bt(mm, pt, old_pt, 1, mm.length - 1);\n    return pt;\n  };\n\n  self.mm_bt = function (mm, pt, old_pt, i, j) {\n    // Create a pairtable from the backtracking\n    var maximum = mm[i][j];\n    var TURN = 0;\n    if (j - i - 1 < TURN) return;\n    /* no more pairs */\n\n    if (mm[i][j - 1] == maximum) {\n      /* j is unpaired */\n      self.mm_bt(mm, pt, old_pt, i, j - 1);\n      return;\n    }\n\n    for (var q = j - TURN - 1; q >= i; q--) {\n      /* j is paired with some q */\n      if (old_pt[j] !== q) continue;\n      var left_part = q > i ? mm[i][q - 1] : 0;\n      var enclosed_part = j - q - 1 > 0 ? mm[q + 1][j - 1] : 0;\n\n      if (left_part + enclosed_part + 1 == maximum) {\n        // there's a base pair between j and q\n        pt[q] = j;\n        pt[j] = q;\n        if (i < q) self.mm_bt(mm, pt, old_pt, i, q - 1);\n        self.mm_bt(mm, pt, old_pt, q + 1, j - 1);\n        return;\n      }\n    } //alert(i + ',' + j + ': backtracking failed!');\n\n\n    console.log('FAILED!!!' + i + ',' + j + ': backtracking failed!');\n  };\n\n  self.dotbracketToPairtable = function (dotbracket) {\n    // create an array and initialize it to 0\n    pt = Array.apply(null, new Array(dotbracket.length + 1)).map(Number.prototype.valueOf, 0); //  the first element is always the length of the RNA molecule\n\n    pt[0] = dotbracket.length; // store the pairing partners for each symbol\n\n    stack = {};\n\n    for (i = 0; i < self.bracket_left.length; i++) {\n      stack[i] = [];\n    } // lookup the index of each symbol in the bracket array\n\n\n    inverse_bracket_left = self.inverse_brackets(self.bracket_left);\n    inverse_bracket_right = self.inverse_brackets(self.bracket_right);\n\n    for (i = 0; i < dotbracket.length; i++) {\n      a = dotbracket[i];\n      ni = i + 1;\n\n      if (a == '.') {\n        // unpaired\n        pt[ni] = 0;\n      } else {\n        if (a in inverse_bracket_left) {\n          // open pair?\n          stack[inverse_bracket_left[a]].push(ni);\n        } else if (a in inverse_bracket_right) {\n          // close pair?\n          j = stack[inverse_bracket_right[a]].pop();\n          pt[ni] = j;\n          pt[j] = ni;\n        } else {\n          throw 'Unknown symbol in dotbracket string';\n        }\n      }\n    }\n\n    for (key in stack) {\n      if (stack[key].length > 0) {\n        throw 'Unmatched base at position ' + stack[key][0];\n      }\n    }\n\n    return pt;\n  };\n\n  self.insert_into_stack = function (stack, i, j) {\n    var k = 0;\n\n    while (stack[k].length > 0 && stack[k][stack[k].length - 1] < j) {\n      k += 1;\n    }\n\n    stack[k].push(j);\n    return k;\n  };\n\n  self.delete_from_stack = function (stack, j) {\n    var k = 0;\n\n    while (stack[k].length === 0 || stack[k][stack[k].length - 1] != j) {\n      k += 1;\n    }\n\n    stack[k].pop();\n    return k;\n  };\n\n  self.pairtableToDotbracket = function (pt) {\n    // store the pairing partners for each symbol\n    stack = {};\n\n    for (i = 0; i < pt[0]; i++) {\n      stack[i] = [];\n    }\n\n    seen = {};\n    res = '';\n\n    for (i = 1; i < pt[0] + 1; i++) {\n      if (pt[i] !== 0 && pt[i] in seen) {\n        throw 'Invalid pairtable contains duplicate entries';\n      }\n\n      seen[pt[i]] = true;\n\n      if (pt[i] === 0) {\n        res += '.';\n      } else {\n        if (pt[i] > i) {\n          res += self.bracket_left[self.insert_into_stack(stack, i, pt[i])];\n        } else {\n          res += self.bracket_right[self.delete_from_stack(stack, i)];\n        }\n      }\n    }\n\n    return res;\n  };\n\n  self.find_unmatched = function (pt, from, to) {\n    /*\n     * Find unmatched nucleotides in this molecule.\n     */\n    var to_remove = [];\n    var unmatched = [];\n    var orig_from = from;\n    var orig_to = to;\n\n    for (var i = from; i <= to; i++) {\n      if (pt[i] !== 0 && (pt[i] < from || pt[i] > to)) unmatched.push([i, pt[i]]);\n    }\n\n    for (i = orig_from; i <= orig_to; i++) {\n      while (pt[i] === 0 && i <= orig_to) {\n        i++;\n      }\n\n      to = pt[i];\n\n      while (pt[i] === to) {\n        i++;\n        to--;\n      }\n\n      to_remove = to_remove.concat(self.find_unmatched(pt, i, to));\n    }\n\n    if (unmatched.length > 0) to_remove.push(unmatched);\n    return to_remove;\n  };\n\n  self.removePseudoknotsFromPairtable = function (pt) {\n    /* Remove the pseudoknots from this structure in such a fashion\n     * that the least amount of base-pairs need to be broken\n     *\n     * The pairtable is manipulated in place and a list of tuples\n     * indicating the broken base pairs is returned.\n     */\n    var mm = self.maximumMatching(pt);\n    var new_pt = self.backtrackMaximumMatching(mm, pt);\n    var removed = [];\n\n    for (var i = 1; i < pt.length; i++) {\n      if (pt[i] < i) continue;\n\n      if (new_pt[i] != pt[i]) {\n        removed.push([i, pt[i]]);\n        pt[pt[i]] = 0;\n        pt[i] = 0;\n      }\n    }\n\n    return removed;\n  };\n}\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/rnaplot.js?")},"./scripts/rnatreemap.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _rnaplot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rnaplot.js */ \"./scripts/rnaplot.js\");\n\n\nmodule.exports = function rnaTreemapChart() {\n  var width = 550;\n  var height = 400;\n\n  function rnaTreemapNode(selection) {\n    // create a background rectangle for each RNA structure\n    selection.each(function (d) {\n      d3.select(this).attr('transform', function (d) {\n        return 'translate(' + d.x + ',' + d.y + ')';\n      }).append('rect').classed('structure-background-rect', true).attr('width', function (d) {\n        return Math.max(0, d.dx);\n      }).attr('height', function (d) {\n        return Math.max(0, d.dy);\n      }); // draw the actual RNA structure\n\n      var chart = Object(_rnaplot_js__WEBPACK_IMPORTED_MODULE_0__[\"rnaPlot\"])().width(Math.max(0, d.dx)).height(Math.max(0, d.dy)).labelInterval(0).rnaEdgePadding(10).showNucleotideLabels(false);\n      if ('structure' in d) d3.select(this).call(chart);\n    });\n  }\n\n  var chart = function (selection) {\n    selection.each(function (data) {\n      console.log('data:', data); // initialize the treemap structure\n      // sample input\n      // { 'name': 'blah',\n      // 'children: [{'structure': '..((..))',\n      //         'sequence': 'ACCGGCC',\n      //         'size': 50}]\n      // }\n\n      var treemap = d3.layout.treemap().size([width, height]).sticky(false).value(function (d) {\n        return d.size;\n      }); // create a new <g> for each node in the treemap\n      // this may be a little redundant, since we expect the calling\n      // selection to contain their own g elements\n\n      var gEnter = d3.select(this).append('g');\n      var treemapGnodes = gEnter.datum(data).selectAll('.treemapNode').data;\n    });\n  }(treemap.nodes).enter().append('g').attr('class', 'treemapNode').call(rnaTreemapNode);\n\n  chart.width = function (_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function (_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  return chart;\n};\n\nfunction rnaTreemapGridChart() {\n  var chart = function chart(selection) {\n    console.log('selection:', selection);\n    selection.each(function (data) {\n      console.log('data:', data);\n    });\n  };\n\n  return chart;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack-stream/node_modules/webpack/buildin/harmony-module.js */ \"../node_modules/webpack-stream/node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/rnatreemap.js?")},"./scripts/simplernaplot.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simpleXyCoordinates", function() { return simpleXyCoordinates; });\nfunction simpleXyCoordinates(pair_table) {\n  var INIT_ANGLE = 0.;\n  /* initial bending angle */\n\n  var INIT_X = 100.;\n  /* coordinate of first digit */\n\n  var INIT_Y = 100.;\n  /* see above */\n\n  var RADIUS = 15.;\n  var x = [],\n      y = [];\n  var i, len;\n  var alpha;\n  len = pair_table[0];\n  var angle = Array.apply(null, new Array(len + 5)).map(Number.prototype.valueOf, 0);\n  var loop_size = Array.apply(null, new Array(16 + Math.floor(len / 5))).map(Number.prototype.valueOf, 0);\n  var stack_size = Array.apply(null, new Array(16 + Math.floor(len / 5))).map(Number.prototype.valueOf, 0);\n  var lp = 0;\n  var stk = 0;\n  var PIHALF = Math.PI / 2;\n\n  var loop = function loop(i, j, pair_table)\n  /* i, j are the positions AFTER the last pair of a stack; i.e\n     i-1 and j+1 are paired. */\n  {\n    var count = 2;\n    /* counts the VERTICES of a loop polygon; that\'s\n       NOT necessarily the number of unpaired bases!\n       Upon entry the loop has already 2 vertices, namely\n       the pair i-1/j+1.  */\n\n    var r = 0,\n        bubble = 0;\n    /* bubble counts the unpaired digits in loops */\n\n    var i_old, partner, k, l, start_k, start_l, fill, ladder;\n    var begin, v, diff;\n    var polygon;\n    var remember = Array.apply(null, new Array(3 + Math.floor((j - i) / 5) * 2)).map(Number.prototype.valueOf, 0);\n    i_old = i - 1, j++;\n    /* j has now been set to the partner of the\n       previous pair for correct while-loop\n       termination.  */\n\n    while (i != j) {\n      partner = pair_table[i];\n      if (!partner || i == 0) i++, count++, bubble++;else {\n        count += 2;\n        k = i, l = partner;\n        /* beginning of stack */\n\n        remember[++r] = k;\n        remember[++r] = l;\n        i = partner + 1;\n        /* next i for the current loop */\n\n        start_k = k, start_l = l;\n        ladder = 0;\n\n        do {\n          k++, l--, ladder++;\n          /* go along the stack region */\n        } while (pair_table[k] == l && pair_table[k] > k);\n\n        fill = ladder - 2;\n\n        if (ladder >= 2) {\n          angle[start_k + 1 + fill] += PIHALF;\n          /*  Loop entries and    */\n\n          angle[start_l - 1 - fill] += PIHALF;\n          /*  exits get an        */\n\n          angle[start_k] += PIHALF;\n          /*  additional PI/2.    */\n\n          angle[start_l] += PIHALF;\n          /*  Why ? (exercise)    */\n\n          if (ladder > 2) {\n            for (; fill >= 1; fill--) {\n              angle[start_k + fill] = Math.PI;\n              /*  fill in the angles  */\n\n              angle[start_l - fill] = Math.PI;\n              /*  for the backbone    */\n            }\n          }\n        }\n\n        stack_size[++stk] = ladder;\n        if (k <= l) loop(k, l, pair_table);\n      }\n    }\n\n    polygon = Math.PI * (count - 2) / count;\n    /* bending angle in loop polygon */\n\n    remember[++r] = j;\n    begin = i_old < 0 ? 0 : i_old;\n\n    for (v = 1; v <= r; v++) {\n      diff = remember[v] - begin;\n\n      for (fill = 0; fill <= diff; fill++) {\n        angle[begin + fill] += polygon;\n      }\n\n      if (v > r) break;\n      begin = remember[++v];\n    }\n\n    loop_size[++lp] = bubble;\n  };\n\n  loop(0, len + 1, pair_table);\n  loop_size[lp] -= 2;\n  /* correct for cheating with function loop */\n\n  alpha = INIT_ANGLE;\n  x[0] = INIT_X;\n  y[0] = INIT_Y;\n  var poss = [];\n  poss.push([x[0], y[0]]);\n\n  for (i = 1; i < len; i++) {\n    x[i] = x[i - 1] + RADIUS * Math.cos(alpha);\n    y[i] = y[i - 1] + RADIUS * Math.sin(alpha);\n    poss.push([x[i], y[i]]);\n    alpha += Math.PI - angle[i + 1];\n  }\n\n  return poss;\n}\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/simplernaplot.js?')},"./styles/rnaplot.css":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_rnaplot_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./rnaplot.css */ "../node_modules/css-loader/dist/cjs.js!./styles/rnaplot.css");\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_rnaplot_css__WEBPACK_IMPORTED_MODULE_1__["default"], options);\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = (_node_modules_css_loader_dist_cjs_js_rnaplot_css__WEBPACK_IMPORTED_MODULE_1__["default"].locals || {});\n\n//# sourceURL=webpack://%5Bname%5D/./styles/rnaplot.css?')}},e={},f.m=d,f.c=e,f.d=function(n,e,t){f.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},f.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},f.t=function(e,n){if(1&n&&(e=f(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(f.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)f.d(t,i,function(n){return e[n]}.bind(null,i));return t},f.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return f.d(e,"a",e),e},f.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},f.p="",f(f.s="./scripts/rnatreemap.js");function f(n){if(e[n])return e[n].exports;var t=e[n]={i:n,l:!1,exports:{}};return d[n].call(t.exports,t,t.exports,f),t.l=!0,t.exports}var d,e});